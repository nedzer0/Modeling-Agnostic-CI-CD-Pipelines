/**
 * generated by Xtext 2.34.0
 */
package org.xtext.example.mydsl.formatting2;

import com.google.inject.Inject;
import devOps.Artifact;
import devOps.Command;
import devOps.Environment;
import devOps.IfThenElse;
import devOps.Job;
import devOps.Parallel;
import devOps.Permission;
import devOps.Pipeline;
import devOps.Tool_Framework;
import devOps.When;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.mydsl.services.MyDslGrammarAccess;

@SuppressWarnings("all")
public class MyDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private MyDslGrammarAccess _myDslGrammarAccess;

  protected void _format(final Pipeline pipeline, @Extension final IFormattableDocument document) {
    EList<When> _when = pipeline.getWhen();
    for (final When when : _when) {
      document.<When>format(when);
    }
    EList<Job> _job = pipeline.getJob();
    for (final Job job : _job) {
      document.<Job>format(job);
    }
    EList<Tool_Framework> _pipeline_tool_framework = pipeline.getPipeline_tool_framework();
    for (final Tool_Framework tool_Framework : _pipeline_tool_framework) {
      document.<Tool_Framework>format(tool_Framework);
    }
    EList<Environment> _pipeline_environment = pipeline.getPipeline_environment();
    for (final Environment environment : _pipeline_environment) {
      document.<Environment>format(environment);
    }
    EList<Permission> _permission = pipeline.getPermission();
    for (final Permission permission : _permission) {
      document.<Permission>format(permission);
    }
    EList<Parallel> _parallel = pipeline.getParallel();
    for (final Parallel parallel : _parallel) {
      document.<Parallel>format(parallel);
    }
  }

  protected void _format(final Job job, @Extension final IFormattableDocument document) {
    EList<Tool_Framework> _tool_framework_job = job.getTool_framework_job();
    for (final Tool_Framework tool_Framework : _tool_framework_job) {
      document.<Tool_Framework>format(tool_Framework);
    }
    EList<Command> _command = job.getCommand();
    for (final Command command : _command) {
      document.<Command>format(command);
    }
    EList<IfThenElse> _ifthenelse = job.getIfthenelse();
    for (final IfThenElse ifThenElse : _ifthenelse) {
      document.<IfThenElse>format(ifThenElse);
    }
    EList<Artifact> _input = job.getInput();
    for (final Artifact artifact : _input) {
      document.<Artifact>format(artifact);
    }
    EList<Environment> _environment = job.getEnvironment();
    for (final Environment environment : _environment) {
      document.<Environment>format(environment);
    }
    EList<Permission> _permission = job.getPermission();
    for (final Permission permission : _permission) {
      document.<Permission>format(permission);
    }
  }

  public void format(final Object job, final IFormattableDocument document) {
    if (job instanceof XtextResource) {
      _format((XtextResource)job, document);
      return;
    } else if (job instanceof Job) {
      _format((Job)job, document);
      return;
    } else if (job instanceof Pipeline) {
      _format((Pipeline)job, document);
      return;
    } else if (job instanceof EObject) {
      _format((EObject)job, document);
      return;
    } else if (job == null) {
      _format((Void)null, document);
      return;
    } else if (job != null) {
      _format(job, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(job, document).toString());
    }
  }
}
