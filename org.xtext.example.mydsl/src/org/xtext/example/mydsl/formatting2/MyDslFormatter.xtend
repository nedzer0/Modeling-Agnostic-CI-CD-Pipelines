/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.mydsl.formatting2

import com.google.inject.Inject
import devOps.Job
import devOps.Pipeline
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.xtext.example.mydsl.services.MyDslGrammarAccess

class MyDslFormatter extends AbstractFormatter2 {
	
	@Inject extension MyDslGrammarAccess

	def dispatch void format(Pipeline pipeline, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (when : pipeline.when) {
			when.format
		}
		for (job : pipeline.job) {
			job.format
		}
		for (tool_Framework : pipeline.pipeline_tool_framework) {
			tool_Framework.format
		}
		for (environment : pipeline.pipeline_environment) {
			environment.format
		}
		for (permission : pipeline.permission) {
			permission.format
		}
		for (parallel : pipeline.parallel) {
			parallel.format
		}
	}

	def dispatch void format(Job job, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (tool_Framework : job.tool_framework_job) {
			tool_Framework.format
		}
		for (command : job.command) {
			command.format
		}
		for (ifThenElse : job.ifthenelse) {
			ifThenElse.format
		}
		for (artifact : job.input) {
			artifact.format
		}
		for (environment : job.environment) {
			environment.format
		}
		for (permission : job.permission) {
			permission.format
		}
	}
	
	// TODO: implement for Parallel, Command, IfThenElse
}
