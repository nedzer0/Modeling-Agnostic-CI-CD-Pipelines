/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.jenkins.formatting2

import com.google.inject.Inject
import jenkins_metamodel.Pipeline
import jenkins_metamodel.Stage
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.xtext.example.jenkins.services.JenkinsGrammarAccess

class JenkinsFormatter extends AbstractFormatter2 {
	
	@Inject extension JenkinsGrammarAccess

	def dispatch void format(Pipeline pipeline, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (agent : pipeline.agents) {
			agent.format
		}
		for (option : pipeline.options) {
			option.format
		}
		for (trigger : pipeline.triggers) {
			trigger.format
		}
		for (parameter_Directive : pipeline.parameter_directives) {
			parameter_Directive.format
		}
		for (environment : pipeline.environments) {
			environment.format
		}
		for (tool : pipeline.tools) {
			tool.format
		}
		for (stage : pipeline.stages) {
			stage.format
		}
		for (post : pipeline.post) {
			post.format
		}
	}

	def dispatch void format(Stage stage, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (_stage : stage.stages) {
			_stage.format
		}
		for (agent : stage.agents) {
			agent.format
		}
		for (step : stage.steps) {
			step.format
		}
		for (environment : stage.environments) {
			environment.format
		}
		for (input : stage.inputs) {
			input.format
		}
		for (when : stage.when) {
			when.format
		}
		for (stageOption : stage.stage_options) {
			stageOption.format
		}
		stage.matrix.format
	}
	
	// TODO: implement for Post, Step, Input, Matrix, Not, AnyOf, AllOf
}
