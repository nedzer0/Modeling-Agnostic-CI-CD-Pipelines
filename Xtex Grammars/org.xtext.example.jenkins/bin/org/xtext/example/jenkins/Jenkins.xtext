// automatically generated by Xtext
grammar org.xtext.example.jenkins.Jenkins with org.eclipse.xtext.common.Terminals

import "http://www.example.org/jenkins_metamodel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Pipeline returns Pipeline:
	'Pipeline' NEWLINE
	((agents+=Agent)+ NEWLINE?)
	((options+=Option)+ NEWLINE?)?
	((triggers+=Trigger)+ NEWLINE?)?
	((parameter_directives+=Parameter_Directive)+ NEWLINE?)?
	((environments+=Environment)+ NEWLINE?)?
	((tools+=Tool)+ NEWLINE?)?
	((stages+=Stage)+ NEWLINE?)
	((post+=Post)+ NEWLINE?)?
;



Parameter_Directive returns Parameter_Directive:
	StringParam | TextParam | ChoiceParam | PasswordParam | BooleanParam;


Agent returns Agent:
	Node | Any | None | Dockerfile | Docker | Label;

Trigger returns Trigger:
	Cron | PollSCM | Upstream;

Option returns Option:
	BuildDiscarder | CheckoutToSubdirectory | SkipStagesAfterUnstable | SkipDefaultCheckout | Retry | QuietPeriod | PreserveStashes | Timeout | ParallelsAlwaysFailFast | Timestamps | DisableRestartFromStage | DisableResume | OverrideIndexTriggers | NewContainerPerStage | DisableConcurrentBuilds;



When returns When:
	BuildingTag | Branch | Changelog | TriggeredBy | Expression | ChangeSet | Not | AnyOf | Tag | When_Env | AllOf | Equals | ChangeRequest;

StageOption returns StageOption:
	SkipDefaultCheckout | Retry | Timeout | Timestamps;





Environment returns Environment:
	'Environment'
	(BEGIN
		'key' key=EString 
		'value' value=EString
	END);

Stage returns Stage:
	'Stage'
	(BEGIN
		'name' name=EString 
		(parallel?='parallel' )?
		(failFast?='failFast')?
		(stages+=Stage)*
		(agents+=Agent)*
		(steps+=Step)*
		(environments+=Environment)*
		(inputs+=Input)*
		(when+=When)*
		(stage_options+=StageOption)*
		matrix=Matrix?
	END);

Post returns Post:
	'Post'
	(BEGIN
		'condition' condition=POST_TYPE 
		(steps+=Step)+
	END);

Tool returns Tool:
	'Tool'
	(BEGIN
		'tool' tool=TOOL_TYPE 
		'tool_name' tool_name=EString
	END);

EString returns ecore::EString:
	STRING | ID;

Step returns Step:
	'Step'
	(BEGIN
		commands=Command 
		(step_parameters+=Step_Parameter)*
	END);

Input returns Input:
	'Input'
	(BEGIN
		'message' message=EString 
		('id' id=EString )?
		('ok' ok=EString )?
		('submitter' submitter=EString )?
		('submitterParameter' submitterParameter=EString )?
		(parameter_directives+=Parameter_Directive)*
	END);

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Matrix returns Matrix:
	'Matrix'
	(BEGIN
		(axis+=Axis)+
		(stages+=Stage)+
		(inputs+=Input)*
		(when+=When)*
		(environments+=Environment)*
		(agents+=Agent)*
		(tools+=Tool)*
		(post+=Post)*
		(stage_options+=StageOption)*
	END);

Command returns Command:
	{Command}
	'Command'
	(BEGIN
		'name' name=EString
	END);

Step_Parameter returns Step_Parameter:
	'Step_Parameter'
	(BEGIN
		'parameter' parameter=EString
	END);

BuildingTag returns BuildingTag:
	{BuildingTag}
	'BuildingTag'
	;

Branch returns Branch:
	'Branch'
	(BEGIN
		'pattern' pattern=EString 
		('comparator' comparator=COMPARATOR_TYPE)?
	END);

Changelog returns Changelog:
	'Changelog'
	(BEGIN
		'expression' expression=EString
	END);

TriggeredBy returns TriggeredBy:
	'TriggeredBy'
	(BEGIN
		'parameter' parameter=EString
	END);

Expression returns Expression:
	'Expression'
	(BEGIN
		'expression' expression=EString
	END);

ChangeSet returns ChangeSet:
	'ChangeSet'
	(BEGIN
		'pattern' pattern=EString 
		('comparator' comparator=COMPARATOR_TYPE)?
	END);

Not returns Not:
	{Not} 
	'Not'
	(BEGIN
		(when+=When)+
	END);

AnyOf returns AnyOf:
	{AnyOf} 
	'AnyOf'
	(BEGIN
		(when+=When)+
	END);

Tag returns Tag:
	'Tag'
	(BEGIN
		'pattern' pattern=EString 
		('comparator' comparator=COMPARATOR_TYPE)?
	END);

When_Env returns When_Env:
	'When_Env'
	(BEGIN
		'name' name=EString 
		'value' value=EString
	END);

AllOf returns AllOf:
	'AllOf'
	(BEGIN
		(when+=When)+
	END);

Equals returns Equals:
	'Equals'
	(BEGIN
		'expected_val' expected_val=EString 
		'actual_val' actual_val=EString
	END);

ChangeRequest returns ChangeRequest:
	'ChangeRequest'
	(BEGIN
		'attribute' attribute=ATTRIBUTE_TYPE 
		'value' value=EString 
		('comparator' comparator=COMPARATOR_TYPE)?
	END);

enum COMPARATOR_TYPE returns COMPARATOR_TYPE:
				none = 'none' | glob = 'glob' | regexp = 'regexp' | equals = 'equals';

enum ATTRIBUTE_TYPE returns ATTRIBUTE_TYPE:
				target = 'target' | branch = 'branch' | fork = 'fork' | url = 'url' | title = 'title' | author = 'author' | authorDisplayName = 'authorDisplayName' | authorEmail = 'authorEmail' | id = 'id';

SkipDefaultCheckout returns SkipDefaultCheckout:
	{SkipDefaultCheckout}
	'SkipDefaultCheckout'
	;

Retry returns Retry:
	'Retry'
	(BEGIN
		'retries' retries=EShort
	END);

Timeout returns Timeout:
	'Timeout'
	(BEGIN 
		'time' time=EShort 
		'unit' unit=EString
	END);

Timestamps returns Timestamps:
	{Timestamps}
	'Timestamps'
	;

EShort returns ecore::EShort:
	'-'? INT;

Axis returns Axis:
	'Axis'
	(BEGIN
		'name' name=EString 
		'values' values+=EString ( "," values+=EString)* 
		(exclude?='exclude')?
	END);

enum POST_TYPE returns POST_TYPE:
				always = 'always' | changed = 'changed' | fixed = 'fixed' | regression = 'regression' | aborted = 'aborted' | failure = 'failure' | success = 'success' | unstable = 'unstable' | unsuccessful = 'unsuccessful' | cleanup = 'cleanup';

StringParam returns StringParam:
	'StringParam'
	(BEGIN
		'name' name=EString 
		('description' description=EString )?
		'defaultValue' defaultValue=EString
	END);

TextParam returns TextParam:
	'TextParam'
	(BEGIN
		'name' name=EString 
		('description' description=EString )?
		'defaultValue' defaultValue=EString
	END);

ChoiceParam returns ChoiceParam:
	'ChoiceParam'
	(BEGIN
		'name' name=EString 
		('description' description=EString )?
		'choices' choices+=EString ( "," choices+=EString)* 
	END);

PasswordParam returns PasswordParam:
	'PasswordParam'
	(BEGIN
		'name' name=EString 
		('description' description=EString )?
		'defaultValue' defaultValue=EString
	END);

BooleanParam returns BooleanParam:
	'BooleanParam'
	(BEGIN
		'name' name=EString 
		('description' description=EString )?
		defaultValue?='defaultValue'
	END);

enum TOOL_TYPE returns TOOL_TYPE:
				maven = 'maven' | jdk = 'jdk' | gradle = 'gradle';

Node returns Node:
	'Node'
	(BEGIN
		'label' label=EString 
		('customWorkspace' customWorkspace=EString)?
	END);

Any returns Any:
	{Any}
	'Any'
	;

None returns None:
	{None}
	'None'
	;

Dockerfile returns Dockerfile:
	'Dockerfile'
	(BEGIN
		'filename' filename=EString 
		('dir' dir=EString )?
		('additionalBuildArgs' additionalBuildArgs=EString )?
		('registryUrl' registryUrl=EString )?
		('registryCredentialsId' registryCredentialsId=EString )?
		('label' label=EString )?
		('customWorkspace' customWorkspace=EString )?
		('reuseNode' reuseNode=EString )?
		('args' args=EString)?
	END);

Docker returns Docker:
	'Docker'
	(BEGIN
		'image' image=EString 
		('registryUrl' registryUrl=EString) ?
		('registryCredentialsId' registryCredentialsId=EString )?
		('label' label=EString )?
		('customWorkspace' customWorkspace=EString )?
		('reuseNode' reuseNode=EString )?
		('args' args=EString )?
		(alwaysPull?='alwaysPull')?
	END);

Label returns Label:
	'Label'
	(BEGIN
		'label' label=EString
	END);

Cron returns Cron:
	'Cron'
	(BEGIN
		'timer' timer=EString
	END);

PollSCM returns PollSCM:
	'PollSCM'
	(BEGIN
		'timer' timer=EString
	END);

Upstream returns Upstream:
	'Upstream'
	(BEGIN
		'jobs' jobs+=EString ( "," jobs+=EString)* 
		'threshold' threshold=EString
	END);

BuildDiscarder returns BuildDiscarder:
	'BuildDiscarder'
	(BEGIN
		'numToKeepStr' numToKeepStr=EShort
	END);

CheckoutToSubdirectory returns CheckoutToSubdirectory:
	'CheckoutToSubdirectory'
	(BEGIN
		'directory' directory=EString
	END);

SkipStagesAfterUnstable returns SkipStagesAfterUnstable:
	{SkipStagesAfterUnstable}
	'SkipStagesAfterUnstable'
	;

QuietPeriod returns QuietPeriod:
	{QuietPeriod} 'QuietPeriod'
	(BEGIN
		'period' period=EShort
	END);

PreserveStashes returns PreserveStashes:
	{PreserveStashes}
	'PreserveStashes'
	(BEGIN
		('buildCount' buildCount=EString)?
	END)?;

ParallelsAlwaysFailFast returns ParallelsAlwaysFailFast:
	{ParallelsAlwaysFailFast}
	'ParallelsAlwaysFailFast'
	;

DisableRestartFromStage returns DisableRestartFromStage:
	{DisableRestartFromStage}
	'DisableRestartFromStage'
	;

DisableResume returns DisableResume:
	{DisableResume}
	'DisableResume'
	;

OverrideIndexTriggers returns OverrideIndexTriggers:
	{OverrideIndexTriggers} 'OverrideIndexTriggers'
	(BEGIN
		override?='override'
	END)
	;

NewContainerPerStage returns NewContainerPerStage:
	{NewContainerPerStage}
	'NewContainerPerStage'
	;

DisableConcurrentBuilds returns DisableConcurrentBuilds:
	{DisableConcurrentBuilds} 'DisableConcurrentBuilds'
	(BEGIN
		abort?='abort'	
	END)
	;


terminal NEWLINE:
// New line on DOS or Unix 
    '\r'? '\n';

terminal BEGIN: 'synthetic:BEGIN';  // increase indentation
terminal END: 'synthetic:END';      // decrease indentation