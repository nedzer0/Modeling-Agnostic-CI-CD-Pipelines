/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.cicd.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.antlr.runtime.CharStream;
import org.antlr.runtime.TokenSource;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.cicd.ide.contentassist.antlr.internal.InternalCICDParser;
import org.xtext.example.cicd.services.CICDGrammarAccess;

public class CICDParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(CICDGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, CICDGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEBooleanObjectAccess().getAlternatives(), "rule__EBooleanObject__Alternatives");
			builder.put(grammarAccess.getCACHE_MODEAccess().getAlternatives(), "rule__CACHE_MODE__Alternatives");
			builder.put(grammarAccess.getARTIFACT_TYPEAccess().getAlternatives(), "rule__ARTIFACT_TYPE__Alternatives");
			builder.put(grammarAccess.getMATRIX_CONFIG_TYPEAccess().getAlternatives(), "rule__MATRIX_CONFIG_TYPE__Alternatives");
			builder.put(grammarAccess.getINPUT_TYPEAccess().getAlternatives(), "rule__INPUT_TYPE__Alternatives");
			builder.put(grammarAccess.getPipelineAccess().getGroup(), "rule__Pipeline__Group__0");
			builder.put(grammarAccess.getPipelineAccess().getGroup_1(), "rule__Pipeline__Group_1__0");
			builder.put(grammarAccess.getPipelineAccess().getGroup_2(), "rule__Pipeline__Group_2__0");
			builder.put(grammarAccess.getPipelineAccess().getGroup_3(), "rule__Pipeline__Group_3__0");
			builder.put(grammarAccess.getPipelineAccess().getGroup_4(), "rule__Pipeline__Group_4__0");
			builder.put(grammarAccess.getPipelineAccess().getGroup_5(), "rule__Pipeline__Group_5__0");
			builder.put(grammarAccess.getPipelineAccess().getGroup_6(), "rule__Pipeline__Group_6__0");
			builder.put(grammarAccess.getPipelineAccess().getGroup_7(), "rule__Pipeline__Group_7__0");
			builder.put(grammarAccess.getJobAccess().getGroup(), "rule__Job__Group__0");
			builder.put(grammarAccess.getJobAccess().getGroup_1(), "rule__Job__Group_1__0");
			builder.put(grammarAccess.getJobAccess().getGroup_1_4(), "rule__Job__Group_1_4__0");
			builder.put(grammarAccess.getJobAccess().getGroup_1_5(), "rule__Job__Group_1_5__0");
			builder.put(grammarAccess.getJobAccess().getGroup_1_5_2(), "rule__Job__Group_1_5_2__0");
			builder.put(grammarAccess.getEnvironmentAccess().getGroup(), "rule__Environment__Group__0");
			builder.put(grammarAccess.getEnvironmentAccess().getGroup_1(), "rule__Environment__Group_1__0");
			builder.put(grammarAccess.getScheduleTriggerAccess().getGroup(), "rule__ScheduleTrigger__Group__0");
			builder.put(grammarAccess.getScheduleTriggerAccess().getGroup_1(), "rule__ScheduleTrigger__Group_1__0");
			builder.put(grammarAccess.getAgentAccess().getGroup(), "rule__Agent__Group__0");
			builder.put(grammarAccess.getAgentAccess().getGroup_2(), "rule__Agent__Group_2__0");
			builder.put(grammarAccess.getAgentAccess().getGroup_2_1(), "rule__Agent__Group_2_1__0");
			builder.put(grammarAccess.getAgentAccess().getGroup_2_1_2(), "rule__Agent__Group_2_1_2__0");
			builder.put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
			builder.put(grammarAccess.getInputAccess().getGroup_1(), "rule__Input__Group_1__0");
			builder.put(grammarAccess.getInputAccess().getGroup_1_1(), "rule__Input__Group_1_1__0");
			builder.put(grammarAccess.getInputAccess().getGroup_1_2(), "rule__Input__Group_1_2__0");
			builder.put(grammarAccess.getInputAccess().getGroup_1_3(), "rule__Input__Group_1_3__0");
			builder.put(grammarAccess.getInputAccess().getGroup_1_4(), "rule__Input__Group_1_4__0");
			builder.put(grammarAccess.getInputAccess().getGroup_1_5(), "rule__Input__Group_1_5__0");
			builder.put(grammarAccess.getInputAccess().getGroup_1_5_2(), "rule__Input__Group_1_5_2__0");
			builder.put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
			builder.put(grammarAccess.getOutputAccess().getGroup_1(), "rule__Output__Group_1__0");
			builder.put(grammarAccess.getStepAccess().getGroup(), "rule__Step__Group__0");
			builder.put(grammarAccess.getStepAccess().getGroup_1(), "rule__Step__Group_1__0");
			builder.put(grammarAccess.getIfStepAccess().getGroup(), "rule__IfStep__Group__0");
			builder.put(grammarAccess.getIfStepAccess().getGroup_1(), "rule__IfStep__Group_1__0");
			builder.put(grammarAccess.getIfStepAccess().getGroup_1_3(), "rule__IfStep__Group_1_3__0");
			builder.put(grammarAccess.getIfStepAccess().getGroup_1_4(), "rule__IfStep__Group_1_4__0");
			builder.put(grammarAccess.getArtifactAccess().getGroup(), "rule__Artifact__Group__0");
			builder.put(grammarAccess.getArtifactAccess().getGroup_2(), "rule__Artifact__Group_2__0");
			builder.put(grammarAccess.getArtifactAccess().getGroup_2_1(), "rule__Artifact__Group_2_1__0");
			builder.put(grammarAccess.getArtifactAccess().getGroup_2_2(), "rule__Artifact__Group_2_2__0");
			builder.put(grammarAccess.getArtifactAccess().getGroup_2_3(), "rule__Artifact__Group_2_3__0");
			builder.put(grammarAccess.getArtifactAccess().getGroup_2_3_2(), "rule__Artifact__Group_2_3_2__0");
			builder.put(grammarAccess.getArtifactAccess().getGroup_2_4(), "rule__Artifact__Group_2_4__0");
			builder.put(grammarAccess.getMatrixAccess().getGroup(), "rule__Matrix__Group__0");
			builder.put(grammarAccess.getMatrixAccess().getGroup_1(), "rule__Matrix__Group_1__0");
			builder.put(grammarAccess.getMatrixAccess().getGroup_1_1(), "rule__Matrix__Group_1_1__0");
			builder.put(grammarAccess.getCommandAccess().getGroup(), "rule__Command__Group__0");
			builder.put(grammarAccess.getCommandAccess().getGroup_2(), "rule__Command__Group_2__0");
			builder.put(grammarAccess.getParametersAccess().getGroup(), "rule__Parameters__Group__0");
			builder.put(grammarAccess.getParametersAccess().getGroup_1(), "rule__Parameters__Group_1__0");
			builder.put(grammarAccess.getCacheAccess().getGroup(), "rule__Cache__Group__0");
			builder.put(grammarAccess.getCacheAccess().getGroup_1(), "rule__Cache__Group_1__0");
			builder.put(grammarAccess.getCacheAccess().getGroup_1_3(), "rule__Cache__Group_1_3__0");
			builder.put(grammarAccess.getCacheAccess().getGroup_1_3_2(), "rule__Cache__Group_1_3_2__0");
			builder.put(grammarAccess.getCacheAccess().getGroup_1_4(), "rule__Cache__Group_1_4__0");
			builder.put(grammarAccess.getCacheAccess().getGroup_1_5(), "rule__Cache__Group_1_5__0");
			builder.put(grammarAccess.getCacheAccess().getGroup_1_5_2(), "rule__Cache__Group_1_5_2__0");
			builder.put(grammarAccess.getMatrixConfigAccess().getGroup(), "rule__MatrixConfig__Group__0");
			builder.put(grammarAccess.getMatrixConfigAccess().getGroup_1(), "rule__MatrixConfig__Group_1__0");
			builder.put(grammarAccess.getMatrixConfigAccess().getGroup_1_3(), "rule__MatrixConfig__Group_1_3__0");
			builder.put(grammarAccess.getMatrixConfigAccess().getGroup_1_3_2(), "rule__MatrixConfig__Group_1_3_2__0");
			builder.put(grammarAccess.getDockerContainerAccess().getGroup(), "rule__DockerContainer__Group__0");
			builder.put(grammarAccess.getDockerContainerAccess().getGroup_1(), "rule__DockerContainer__Group_1__0");
			builder.put(grammarAccess.getDockerContainerAccess().getGroup_1_3(), "rule__DockerContainer__Group_1_3__0");
			builder.put(grammarAccess.getDockerContainerAccess().getGroup_1_4(), "rule__DockerContainer__Group_1_4__0");
			builder.put(grammarAccess.getPipelineAccess().getNameAssignment_1_2(), "rule__Pipeline__NameAssignment_1_2");
			builder.put(grammarAccess.getPipelineAccess().getJobsAssignment_2_0(), "rule__Pipeline__JobsAssignment_2_0");
			builder.put(grammarAccess.getPipelineAccess().getPipeline_environmentAssignment_3_0(), "rule__Pipeline__Pipeline_environmentAssignment_3_0");
			builder.put(grammarAccess.getPipelineAccess().getTriggersAssignment_4_0(), "rule__Pipeline__TriggersAssignment_4_0");
			builder.put(grammarAccess.getPipelineAccess().getAgentsAssignment_5_0(), "rule__Pipeline__AgentsAssignment_5_0");
			builder.put(grammarAccess.getPipelineAccess().getInputsAssignment_6_0(), "rule__Pipeline__InputsAssignment_6_0");
			builder.put(grammarAccess.getPipelineAccess().getOutputAssignment_7_0(), "rule__Pipeline__OutputAssignment_7_0");
			builder.put(grammarAccess.getJobAccess().getNameAssignment_1_2(), "rule__Job__NameAssignment_1_2");
			builder.put(grammarAccess.getJobAccess().getAllowFaillureAssignment_1_3(), "rule__Job__AllowFaillureAssignment_1_3");
			builder.put(grammarAccess.getJobAccess().getParallelAssignment_1_4_1(), "rule__Job__ParallelAssignment_1_4_1");
			builder.put(grammarAccess.getJobAccess().getRequireJobsAssignment_1_5_1(), "rule__Job__RequireJobsAssignment_1_5_1");
			builder.put(grammarAccess.getJobAccess().getRequireJobsAssignment_1_5_2_1(), "rule__Job__RequireJobsAssignment_1_5_2_1");
			builder.put(grammarAccess.getJobAccess().getIfStepAssignment_1_6(), "rule__Job__IfStepAssignment_1_6");
			builder.put(grammarAccess.getJobAccess().getArtifactsAssignment_1_7(), "rule__Job__ArtifactsAssignment_1_7");
			builder.put(grammarAccess.getJobAccess().getEnvironmentsAssignment_1_8(), "rule__Job__EnvironmentsAssignment_1_8");
			builder.put(grammarAccess.getJobAccess().getJobsAssignment_1_9(), "rule__Job__JobsAssignment_1_9");
			builder.put(grammarAccess.getJobAccess().getMatrixAssignment_1_10(), "rule__Job__MatrixAssignment_1_10");
			builder.put(grammarAccess.getJobAccess().getAgentsAssignment_1_11(), "rule__Job__AgentsAssignment_1_11");
			builder.put(grammarAccess.getJobAccess().getOutputAssignment_1_12(), "rule__Job__OutputAssignment_1_12");
			builder.put(grammarAccess.getJobAccess().getStepsAssignment_1_13(), "rule__Job__StepsAssignment_1_13");
			builder.put(grammarAccess.getEnvironmentAccess().getKeyAssignment_1_2(), "rule__Environment__KeyAssignment_1_2");
			builder.put(grammarAccess.getEnvironmentAccess().getValueAssignment_1_4(), "rule__Environment__ValueAssignment_1_4");
			builder.put(grammarAccess.getScheduleTriggerAccess().getTimerAssignment_1_2(), "rule__ScheduleTrigger__TimerAssignment_1_2");
			builder.put(grammarAccess.getAgentAccess().getLabelsAssignment_2_1_1(), "rule__Agent__LabelsAssignment_2_1_1");
			builder.put(grammarAccess.getAgentAccess().getLabelsAssignment_2_1_2_1(), "rule__Agent__LabelsAssignment_2_1_2_1");
			builder.put(grammarAccess.getAgentAccess().getContainerAssignment_2_2(), "rule__Agent__ContainerAssignment_2_2");
			builder.put(grammarAccess.getInputAccess().getNameAssignment_1_1_1(), "rule__Input__NameAssignment_1_1_1");
			builder.put(grammarAccess.getInputAccess().getTypeAssignment_1_2_1(), "rule__Input__TypeAssignment_1_2_1");
			builder.put(grammarAccess.getInputAccess().getDefaultAssignment_1_3_1(), "rule__Input__DefaultAssignment_1_3_1");
			builder.put(grammarAccess.getInputAccess().getDescriptionAssignment_1_4_1(), "rule__Input__DescriptionAssignment_1_4_1");
			builder.put(grammarAccess.getInputAccess().getValuesAssignment_1_5_1(), "rule__Input__ValuesAssignment_1_5_1");
			builder.put(grammarAccess.getInputAccess().getValuesAssignment_1_5_2_1(), "rule__Input__ValuesAssignment_1_5_2_1");
			builder.put(grammarAccess.getOutputAccess().getNameAssignment_1_2(), "rule__Output__NameAssignment_1_2");
			builder.put(grammarAccess.getOutputAccess().getValueAssignment_1_4(), "rule__Output__ValueAssignment_1_4");
			builder.put(grammarAccess.getStepAccess().getCacheAssignment_1_1(), "rule__Step__CacheAssignment_1_1");
			builder.put(grammarAccess.getStepAccess().getEnvironmentsAssignment_1_2(), "rule__Step__EnvironmentsAssignment_1_2");
			builder.put(grammarAccess.getStepAccess().getIfStepAssignment_1_3(), "rule__Step__IfStepAssignment_1_3");
			builder.put(grammarAccess.getStepAccess().getCommandsAssignment_1_4(), "rule__Step__CommandsAssignment_1_4");
			builder.put(grammarAccess.getStepAccess().getParametersAssignment_1_5(), "rule__Step__ParametersAssignment_1_5");
			builder.put(grammarAccess.getIfStepAccess().getConditionAssignment_1_2(), "rule__IfStep__ConditionAssignment_1_2");
			builder.put(grammarAccess.getIfStepAccess().getIf_stepsAssignment_1_3_1(), "rule__IfStep__If_stepsAssignment_1_3_1");
			builder.put(grammarAccess.getIfStepAccess().getElse_stepsAssignment_1_4_1(), "rule__IfStep__Else_stepsAssignment_1_4_1");
			builder.put(grammarAccess.getArtifactAccess().getNameAssignment_2_1_1(), "rule__Artifact__NameAssignment_2_1_1");
			builder.put(grammarAccess.getArtifactAccess().getMessageAssignment_2_2_1(), "rule__Artifact__MessageAssignment_2_2_1");
			builder.put(grammarAccess.getArtifactAccess().getPathAssignment_2_3_1(), "rule__Artifact__PathAssignment_2_3_1");
			builder.put(grammarAccess.getArtifactAccess().getPathAssignment_2_3_2_1(), "rule__Artifact__PathAssignment_2_3_2_1");
			builder.put(grammarAccess.getArtifactAccess().getTypeAssignment_2_4_1(), "rule__Artifact__TypeAssignment_2_4_1");
			builder.put(grammarAccess.getMatrixAccess().getNameAssignment_1_1_1(), "rule__Matrix__NameAssignment_1_1_1");
			builder.put(grammarAccess.getMatrixAccess().getStepsAssignment_1_2(), "rule__Matrix__StepsAssignment_1_2");
			builder.put(grammarAccess.getMatrixAccess().getJobsAssignment_1_3(), "rule__Matrix__JobsAssignment_1_3");
			builder.put(grammarAccess.getMatrixAccess().getConfigsAssignment_1_4(), "rule__Matrix__ConfigsAssignment_1_4");
			builder.put(grammarAccess.getCommandAccess().getNameAssignment_2_2(), "rule__Command__NameAssignment_2_2");
			builder.put(grammarAccess.getParametersAccess().getParameterAssignment_1_2(), "rule__Parameters__ParameterAssignment_1_2");
			builder.put(grammarAccess.getCacheAccess().getModeAssignment_1_2(), "rule__Cache__ModeAssignment_1_2");
			builder.put(grammarAccess.getCacheAccess().getPathsAssignment_1_3_1(), "rule__Cache__PathsAssignment_1_3_1");
			builder.put(grammarAccess.getCacheAccess().getPathsAssignment_1_3_2_1(), "rule__Cache__PathsAssignment_1_3_2_1");
			builder.put(grammarAccess.getCacheAccess().getKeyAssignment_1_4_1(), "rule__Cache__KeyAssignment_1_4_1");
			builder.put(grammarAccess.getCacheAccess().getKeysAssignment_1_5_1(), "rule__Cache__KeysAssignment_1_5_1");
			builder.put(grammarAccess.getCacheAccess().getKeysAssignment_1_5_2_1(), "rule__Cache__KeysAssignment_1_5_2_1");
			builder.put(grammarAccess.getMatrixConfigAccess().getNameAssignment_1_2(), "rule__MatrixConfig__NameAssignment_1_2");
			builder.put(grammarAccess.getMatrixConfigAccess().getValuesAssignment_1_3_1(), "rule__MatrixConfig__ValuesAssignment_1_3_1");
			builder.put(grammarAccess.getMatrixConfigAccess().getValuesAssignment_1_3_2_1(), "rule__MatrixConfig__ValuesAssignment_1_3_2_1");
			builder.put(grammarAccess.getMatrixConfigAccess().getTypeAssignment_1_5(), "rule__MatrixConfig__TypeAssignment_1_5");
			builder.put(grammarAccess.getDockerContainerAccess().getImageAssignment_1_2(), "rule__DockerContainer__ImageAssignment_1_2");
			builder.put(grammarAccess.getDockerContainerAccess().getUsernameAssignment_1_3_1(), "rule__DockerContainer__UsernameAssignment_1_3_1");
			builder.put(grammarAccess.getDockerContainerAccess().getPasswordAssignment_1_4_1(), "rule__DockerContainer__PasswordAssignment_1_4_1");
			builder.put(grammarAccess.getDockerContainerAccess().getEnvironmentsAssignment_1_5(), "rule__DockerContainer__EnvironmentsAssignment_1_5");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private CICDGrammarAccess grammarAccess;

	@Override
	protected InternalCICDParser createParser() {
		InternalCICDParser result = new InternalCICDParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected TokenSource createLexer(CharStream stream) {
		return new CICDTokenSource(super.createLexer(stream));
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public CICDGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(CICDGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
