// automatically generated by Xtext
grammar org.xtext.example.gha.GHA with org.eclipse.xtext.common.Terminals

import "http://www.example.org/gHA_metamodel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Pipeline returns Pipeline:
	'Pipeline'
	((BEGIN'name' name=EString ('run-name' run_name=EString)? END))?
	((envs+=Env)+ NEWLINE?)?
	((permissions+=Permission)+ NEWLINE?)?
	(defaultsetting=DefaultSetting NEWLINE?)?
	(concurrency=Concurrency NEWLINE?)?
	((triggers+=Trigger)+ NEWLINE?)?
	((jobs+=Job)+ NEWLINE?) 
;

Trigger returns Trigger:
	ScheduleTrigger | PushTrigger | PullTrigger | StandardEventTrigger | WorkflowCallTrigger | WorkflowDispatchTrigger | WorkflowRunTrigger | PullTargetTrigger;


Action returns Action:
	Action_Impl | Artifact | Docker | RestoreCache | SaveCache;

Job returns Job:
	'Job'
	(BEGIN
		'name' name=EString
		('timeout_minutes' timeout_minutes=EInt )?
		('continue_on_error' continue_on_error=EString )?
		(permissions+=Permission)*
		(need=Need)?
		(if=If)?
		(runner=Runs_On)?
		(environment=Environment)?
		(concurrency=Concurrency)?
		(outputs+=Output)*
		(envs+=Env)*
		(defaultsetting=DefaultSetting)?
		(container=Container)?
		(services+=Service)*
		(actions+=Action)*
		(secrets+=Secret)*
		(strategy=Strategy)?
		(steps+=Step)+
	END);

EString returns ecore::EString:
	STRING | ID;

Permission returns Permission:
	'Permission'
	(BEGIN
		(readAll?='readAll')? 
		(writeAll?='writeAll')? 
		(disableAll?='disableAll')? 
		'permission' permission=PERMISSIONS 
		'scope' scope=PERMISSION_SCOPES
	END);

Concurrency returns Concurrency:
	'Concurrency'
	(BEGIN
		(cancel_in_progress?='cancel_in_progress')?
		'group' group=EString
	END);

Env returns Env:
	'Env'
	(BEGIN
		'key' key=EString 
		'value' value=EString
	END);

DefaultSetting returns DefaultSetting:
	'DefaultSetting'
	(BEGIN
		'shell' shell=EString 
		'workingDirectory' workingDirectory=EString
	END);

ScheduleTrigger returns ScheduleTrigger:
	'ScheduleTrigger'
	(BEGIN
		'cron' cron=EString
	END);

PushTrigger returns PushTrigger:
	{PushTrigger}
	'PushTrigger'
	(BEGIN
		(branches+=Branch)*
		(tags+=Tag)*
		(paths+=Path)*
	END);

PullTrigger returns PullTrigger:
	{PullTrigger}
	'PullTrigger'
	(BEGIN
		('activityType' activityType+=WEBHOOK_ACTIVITY_TYPES (',' activityType+=WEBHOOK_ACTIVITY_TYPES)* )?
		(branches+=Branch)*
		(paths+=Path)*
	END);

StandardEventTrigger returns StandardEventTrigger:
	'StandardEventTrigger'
	(BEGIN
		('activityType' activityType+=WEBHOOK_ACTIVITY_TYPES (',' activityType+=WEBHOOK_ACTIVITY_TYPES)* )?
		'event' event=EVENTS
	END);

WorkflowCallTrigger returns WorkflowCallTrigger:
	{WorkflowCallTrigger}
	'WorkflowCallTrigger'
	(BEGIN
		(inputs+=Input)*
		(outputs+=Output)*
		(secrets+=Secret)*
	END);

WorkflowDispatchTrigger returns WorkflowDispatchTrigger:
	{WorkflowDispatchTrigger}
	'WorkflowDispatchTrigger'
	(BEGIN
		inputs+=Input*
	END);

WorkflowRunTrigger returns WorkflowRunTrigger:
	'WorkflowRunTrigger'
	(BEGIN
		'workflow' workflow=EString 
		'type' type=EString 
		(branches+=Branch)*
	END);

PullTargetTrigger returns PullTargetTrigger:
	{PullTargetTrigger}
	'PullTargetTrigger'
	(BEGIN
		('activityType' activityType+=WEBHOOK_ACTIVITY_TYPES (',' activityType+=WEBHOOK_ACTIVITY_TYPES)* )?
		(branches+=Branch)*
		(paths+=Path)*
	END);

enum WEBHOOK_ACTIVITY_TYPES returns WEBHOOK_ACTIVITY_TYPES:
				ASSIGNED = 'ASSIGNED' | AUTO_MERGE_DISABLED = 'AUTO_MERGE_DISABLED' | AUTO_MERGE_ENABLED = 'AUTO_MERGE_ENABLED' | CLOSED = 'CLOSED' | CONVERTED_TO_DRAFT = 'CONVERTED_TO_DRAFT' | EDITED = 'EDITED' | LABELED = 'LABELED' | LOCKED = 'LOCKED' | OPENED = 'OPENED' | READY_FOR_REVIEW = 'READY_FOR_REVIEW' | REOPENED = 'REOPENED' | REVIEW_REQUEST_REMOVED = 'REVIEW_REQUEST_REMOVED' | REVIEW_REQUESTED = 'REVIEW_REQUESTED' | SYNCHRONIZE = 'SYNCHRONIZE' | UNASSIGNED = 'UNASSIGNED' | UNLABELED = 'UNLABELED' | UNLOCKED = 'UNLOCKED' | CREATED = 'CREATED' | DELETED = 'DELETED' | NONE = 'NONE' | DISABLED = 'DISABLED' | ENABLED = 'ENABLED' | COMPLETED = 'COMPLETED' | REQUESTED_ACTION = 'REQUESTED_ACTION' | REREQUESTED = 'REREQUESTED' | REQUESTED = 'REQUESTED' | APPEARED_IN_BRANCH = 'APPEARED_IN_BRANCH' | CLOSED_BY_USER = 'CLOSED_BY_USER' | FIXED = 'FIXED' | REOPENED_BY_USER = 'REOPENED_BY_USER' | UPDATED = 'UPDATED' | AUTO_DISMISSED = 'AUTO_DISMISSED' | AUTO_REOPENED = 'AUTO_REOPENED' | DISMISSED = 'DISMISSED' | REINTRODUCED = 'REINTRODUCED' | APPROVED = 'APPROVED' | REJECTED = 'REJECTED' | ANSWERED = 'ANSWERED' | CATEGORY_CHANGED = 'CATEGORY_CHANGED' | PINNED = 'PINNED' | TRANSFERED = 'TRANSFERED' | UNANSWERED = 'UNANSWERED' | UNPINNED = 'UNPINNED' | NEW_PERMISSIONS_ACCEPTED = 'NEW_PERMISSIONS_ACCEPTED' | SUSPEND_UNSUSPEND = 'SUSPEND_UNSUSPEND' | ADDED = 'ADDED' | REMOVED = 'REMOVED' | DEMILESTONED = 'DEMILESTONED' | MILESTONED = 'MILESTONED' | CANCELLED = 'CANCELLED' | CHANGED = 'CHANGED' | PENDING_CHANGE = 'PENDING_CHANGE' | PENDING_CHANGE_CANCELLED = 'PENDING_CHANGE_CANCELLED' | PURCHASED = 'PURCHASED' | DENIED = 'DENIED' | CHECKS_REQUESTED = 'CHECKS_REQUESTED' | DESTROYED = 'DESTROYED' | BLOCKED = 'BLOCKED' | MEMBER_ADDED = 'MEMBER_ADDED' | MEMBER_INVITED = 'MEMBER_INVITED' | MEMBER_REMOVED = 'MEMBER_REMOVED' | RENAMED = 'RENAMED' | PUBLISHED = 'PUBLISHED' | MOVED = 'MOVED' | ARCHIVED = 'ARCHIVED' | CONVERTED = 'CONVERTED' | REORDERED = 'REORDERED' | RESTORED = 'RESTORED' | DEQUEUED = 'DEQUEUED' | ENQUEUED = 'ENQUEUED' | SUBMITTED = 'SUBMITTED' | RESOLVED = 'RESOLVED' | UNRESOLVED = 'UNRESOLVED' | PRERELEASED = 'PRERELEASED' | RELEASED = 'RELEASED' | UNPUBLISHED = 'UNPUBLISHED' | REPORTED = 'REPORTED' | PRIVATIZED = 'PRIVATIZED' | PUBLICIZED = 'PUBLICIZED' | TRANSFERRED = 'TRANSFERRED' | UNARCHIVED = 'UNARCHIVED' | DISMISS = 'DISMISS' | REOPEN = 'REOPEN' | RESOLVE = 'RESOLVE' | REVOKED = 'REVOKED' | VALIDATED = 'VALIDATED' | WITHDRAWN = 'WITHDRAWN' | PENDING_CANCELLATION = 'PENDING_CANCELLATION' | PENDING_TIER_CHANGE = 'PENDING_TIER_CHANGE' | TIER_CHANGED = 'TIER_CHANGED' | ADDED_TO_REPOSITORY = 'ADDED_TO_REPOSITORY' | REMOVED_FROM_REPOSITORY = 'REMOVED_FROM_REPOSITORY' | UNBLOCKED = 'UNBLOCKED' | CREATE = 'CREATE' | IN_PROGRESS = 'IN_PROGRESS' | QUEUED = 'QUEUED' | WAITING = 'WAITING';

Branch returns Branch:
	'Branch'
	(BEGIN
		'name' name=EString 
		(ignore?='ignore')?
	END)
;

Tag returns Tag:
	'Tag'
	(BEGIN
		'name' name=EString 
		(ignore?='ignore')? 
	END)
;

Path returns Path:
	'Path'
	(BEGIN
		'name' name=EString 
		(ignore?='ignore')?
	END)
;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

enum EVENTS returns EVENTS:
				BRANCH_PROTECTION_RULE = 'BRANCH_PROTECTION_RULE' | CHECK_RUN = 'CHECK_RUN' | CHECK_SUITE = 'CHECK_SUITE' | CREATE = 'CREATE' | DELETE = 'DELETE' | DEPLOYMENT = 'DEPLOYMENT' | DEPLOYMENT_STATUS = 'DEPLOYMENT_STATUS' | DISCUSSION = 'DISCUSSION' | DISCUSSION_COMMENT = 'DISCUSSION_COMMENT' | FORK = 'FORK' | GOLLUM = 'GOLLUM' | ISSUE_COMMENT = 'ISSUE_COMMENT' | ISSUES = 'ISSUES' | LABEL = 'LABEL' | MERGE_GROUP = 'MERGE_GROUP' | MILESTONE = 'MILESTONE' | PAGE_BUILD = 'PAGE_BUILD' | PROJECT = 'PROJECT' | PROJECT_CARD = 'PROJECT_CARD' | PROJECT_COLUMN = 'PROJECT_COLUMN' | PUBLIC = 'PUBLIC' | PULL_REQUEST_REVIEW = 'PULL_REQUEST_REVIEW' | PULL_REQUEST_REVIEW_COMMENT = 'PULL_REQUEST_REVIEW_COMMENT' | REGISTRY_PACKAGE = 'REGISTRY_PACKAGE' | RELEASE = 'RELEASE' | REPOSITORY_DISPATCH = 'REPOSITORY_DISPATCH' | STATUS = 'STATUS' | WATCH = 'WATCH' | BRANCH_PROTECTION_CONFIGURATION = 'BRANCH_PROTECTION_CONFIGURATION' | CODE_SCANNING_ALERT = 'CODE_SCANNING_ALERT' | COMMIT_COMMENT = 'COMMIT_COMMENT' | CUSTOM_PROPERTY = 'CUSTOM_PROPERTY' | CUSTOM_PROPERTY_VALUES = 'CUSTOM_PROPERTY_VALUES' | DEPENDABOT_ALERT = 'DEPENDABOT_ALERT' | DEPLOY_KEY = 'DEPLOY_KEY' | DEPLOYMENT_PROTECTION_RULE = 'DEPLOYMENT_PROTECTION_RULE' | DEPLOYMENT_REVIEW = 'DEPLOYMENT_REVIEW' | GITHUB_APP_AUTHORIZATION = 'GITHUB_APP_AUTHORIZATION' | INSTALLATION = 'INSTALLATION' | INSTALLATION_REPOSITORIES = 'INSTALLATION_REPOSITORIES' | INSTALLATION_TARGET = 'INSTALLATION_TARGET' | MARKETPLACE_PURCHASE = 'MARKETPLACE_PURCHASE' | MEMBER = 'MEMBER' | MEMBERSHIP = 'MEMBERSHIP' | META = 'META' | ORG_BLOCK = 'ORG_BLOCK' | ORGANIZATION = 'ORGANIZATION' | PACKAGE = 'PACKAGE' | PERSONAL_ACCESS_TOKEN_REQUEST = 'PERSONAL_ACCESS_TOKEN_REQUEST' | PING = 'PING' | PROJECTS_V2 = 'PROJECTS_V2' | PROJECTS_V2_ITEM = 'PROJECTS_V2_ITEM' | PULL_REQUEST = 'PULL_REQUEST' | PULL_REQUEST_REVIEW_THREAD = 'PULL_REQUEST_REVIEW_THREAD' | PUSH = 'PUSH' | REPOSITORY_ADVISORY = 'REPOSITORY_ADVISORY' | REPOSITORY = 'REPOSITORY' | REPOSITORY_IMPORT = 'REPOSITORY_IMPORT' | REPOSITORY_RULESET = 'REPOSITORY_RULESET' | REPOSITORY_VULNERABILITY_ALERT = 'REPOSITORY_VULNERABILITY_ALERT' | SECRET_SCANNING_ALERT = 'SECRET_SCANNING_ALERT' | SECRET_SCANNING_ALERT_LOCATION = 'SECRET_SCANNING_ALERT_LOCATION' | SECURITY_ADVISORY = 'SECURITY_ADVISORY' | SECURITY_AND_ANALYSIS = 'SECURITY_AND_ANALYSIS' | SPONSORSHIP = 'SPONSORSHIP' | STAR = 'STAR' | TEAM_ADD = 'TEAM_ADD' | TEAM = 'TEAM' | WORKFLOW_JOB = 'WORKFLOW_JOB';

Input returns Input:
	{Input}
	'Input'
	(BEGIN
		'name' name=EString 
		(isRequired?='isRequired')?
		('type' type=INPUT_TYPES )?
		('options' options+=EString ("," options+=EString)* )?
		('description' description=EString )?
		('default' default=EString)?
	END);

enum INPUT_TYPES returns INPUT_TYPES:
				STRING = 'STRING' | NUMBER = 'NUMBER' | BOOLEAN = 'BOOLEAN' | ENVIRONMENT = 'ENVIRONMENT' | CHOICE = 'CHOICE';

Output returns Output:
	'Output'
	(BEGIN
		'name' name=EString 
		'value' value=EString 
		('description' description=EString)?
	END);

Secret returns Secret:
	'Secret'
	(BEGIN
		'name' name=EString 
		(required?='required')? 
		'key' key=EString 
		'value' value=EString
	END);

Step returns Step:
	'Step'
	(BEGIN
		('name' name=EString)?
		(if=If)?
		('shell' shell=EString )?
		('working_directory' working_directory=EString)?
		(envs+=Env)*
		(continue_on_error?='continue_on_error')?
		('timeout_minutes' timeout_minutes=EShort )?
		(commands+=Command)+
		(parameters+=Parameter)*
		(actions+=Action)*
	END);

If returns If:
	'If'
	(BEGIN
		'condition' condition=EString
	END);

Strategy returns Strategy:
	{Strategy}
	'Strategy'
	(BEGIN
		('max_parallel' max_parallel=EShort)?
		(fail_fast?='fail_fast')?
		(configs+=MatrixConfig)*
	END);

Environment returns Environment:
	{Environment}
	'Environment'
	(BEGIN
		'name' name=EString 
		('url' url=EString)?
	END);

Need returns Need:
	'Need'
	(BEGIN
		'jobs' jobs+=EString ("," jobs+=EString)* 
	END);

EInt returns ecore::EInt:
	'-'? INT;

Service returns Service:
	'Service'
	(BEGIN
		'name' name=EString 
		container=Container
	END);

Action_Impl returns Action:
	'Action'
	(BEGIN
		'uses' uses=EString 
		(^with+=InputParams)*
		(composite_action+=Step)*
		(with_inputPair=InputPair)?
	END);

Runs_On returns Runs_On:
	{Runs_On}
	'Runs_On'
	(BEGIN
		('labels' labels+=EString ("," labels+=EString)*)?
		('group' group=EString)?
	END);

Container returns Container:
	'Container'
	(BEGIN
		'image' image=EString 
		(credential=Credentials)?
		(envs+=Env)*
		('ports' ports+=EString ("," ports+=EString)* )?
		('volumes' volumes+=EString ("," volumes+=EString)* )?
		('options' options=EString)?
	END);

Command returns Command:
	{Command}
	'Command'
	(BEGIN
		'name' name=EString
	END);

Parameter returns Parameter:
	'Parameter'
	(BEGIN
		'parameter' parameter=EString
	END);

EShort returns ecore::EShort:
	'-'? INT;

MatrixConfig returns MatrixConfig:
	'MatrixConfig'
	(BEGIN
		'key' key=EString 
		'values' values+=EString ("," values+=EString)* 
		('type' type=MATRIX_CONFIG_TYPE)?
	END);

enum MATRIX_CONFIG_TYPE returns MATRIX_CONFIG_TYPE:
				DEFAULT = 'DEFAULT' | INCLUDE = 'INCLUDE' | EXCLUDE = 'EXCLUDE';

InputParams returns InputParams:
	'InputParams'
	(BEGIN
		'key' key=EString 
		'value' value=EString
	END);

InputPair returns InputPair:
	{InputPair}
	'InputPair'
	(BEGIN
		('args' args=EString )? 
		('entrypoint' entrypoint=EString)?
	END);

Artifact returns Artifact:
	'Artifact'
	(BEGIN
		'uses' uses=EString 
		'name' name=EString 
		'paths'paths+=EString ("," paths+=EString)* 
		('retention_days' retention_days=EString )?
		('type' type=ARTIFACT_TYPE )?
		(composite_action+=Step)*
		(^with+=InputParams)*
		(with_inputPair=InputPair)?
	END);

Docker returns Docker:
	'Docker'
	(BEGIN
		'uses' uses=EString 
		'image' image=EString 
		('pre_entrypoint' pre_entrypoint=EString )?
		('entrypoint' entrypoint=EString )?
		('post_entrypoint' post_entrypoint=EString )?
		('args' args+=EString ( "," args+=EString)* )? 
		(composite_action+=Step)*
		(^with+=InputParams)*
		(with_inputPair=InputPair)?
		(envs+=Env)*
	END);

RestoreCache returns RestoreCache:
	'RestoreCache'
	(BEGIN
		'uses' uses="\"actions/cache/restore@v4\"" 
		(lookup_only?='lookup_only' )?
		(fail_on_cache_miss?='fail_on_cache_miss' )?
		'key' key=EString 
		'paths' paths+=EString ("," paths+=EString)* 
		('restore_keys' restore_keys+=EString ("," restore_keys+=EString)* )?
		(composite_action+=Step)*
		(^with+=InputParams)*
		(with_inputPair=InputPair)?
	END);

SaveCache returns SaveCache:
	'SaveCache'
	(BEGIN
		'uses' uses="\"actions/cache/save@v4\""
		'key' key=EString 
		'paths' paths+=EString ( "," paths+=EString)*  
		('upload_chunk_size' upload_chunk_size=EString )?
		(composite_action+=Step)*
		(^with+=InputParams)*
		(with_inputPair=InputPair)?
	END);

enum ARTIFACT_TYPE returns ARTIFACT_TYPE:
				UPLOAD = 'UPLOAD' | DOWNLOAD = 'DOWNLOAD';

Credentials returns Credentials:
	'Credentials'
	(BEGIN
		'username' username=EString 
		'password' password=EString
	END);

enum PERMISSIONS returns PERMISSIONS:
				READ = 'READ' | WRITE = 'WRITE' | NONE = 'NONE';

enum PERMISSION_SCOPES returns PERMISSION_SCOPES:
				ACTIONS = 'ACTIONS' | CHECKS = 'CHECKS' | CONTENTS = 'CONTENTS' | DEPLOYMENTS = 'DEPLOYMENTS' | DISCUSSIONS = 'DISCUSSIONS' | ID_TOKEN = 'ID_TOKEN' | ISSUES = 'ISSUES' | PACKAGES = 'PACKAGES' | PAGES = 'PAGES' | PULL_REQUESTS = 'PULL_REQUESTS' | REPOSITORY_PROJECTS = 'REPOSITORY_PROJECTS' | SECURITY_EVENTS = 'SECURITY_EVENTS' | STATUSES = 'STATUSES';


terminal NEWLINE:
// New line on DOS or Unix 
    '\r'? '\n';

terminal BEGIN: 'synthetic:BEGIN';  // increase indentation
terminal END: 'synthetic:END';      // decrease indentation