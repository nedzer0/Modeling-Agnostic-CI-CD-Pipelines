/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.gha.validation;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.validation.Check;

import gHA_metamodel.Action;
import gHA_metamodel.Artifact;
import gHA_metamodel.Branch;
import gHA_metamodel.Command;
import gHA_metamodel.Concurrency;
import gHA_metamodel.Container;
import gHA_metamodel.Credentials;
import gHA_metamodel.DefaultSetting;
import gHA_metamodel.Docker;
import gHA_metamodel.EVENTS;
import gHA_metamodel.Env;
import gHA_metamodel.Environment;
import gHA_metamodel.If;
import gHA_metamodel.Input;
import gHA_metamodel.InputPair;
import gHA_metamodel.InputParams;
import gHA_metamodel.Job;
import gHA_metamodel.MatrixConfig;
import gHA_metamodel.Need;
import gHA_metamodel.Output;
import gHA_metamodel.Parameter;
import gHA_metamodel.Path;
import gHA_metamodel.Permission;
import gHA_metamodel.Pipeline;
import gHA_metamodel.RestoreCache;
import gHA_metamodel.Runs_On;
import gHA_metamodel.SaveCache;
import gHA_metamodel.ScheduleTrigger;
import gHA_metamodel.Secret;
import gHA_metamodel.Service;
import gHA_metamodel.StandardEventTrigger;
import gHA_metamodel.Tag;
import gHA_metamodel.Trigger;
import gHA_metamodel.WEBHOOK_ACTIVITY_TYPES;
import gHA_metamodel.WorkflowRunTrigger;



/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class GHAValidator extends AbstractGHAValidator {
	
	public static final String DUPLICATE_PIPELINE_PERMISSION = "Another Pipeline Permission instance already exists with readAll, writeAll, or disableAll set to true";
	public static final String DUPLICATE_JOB_PERMISSION = "Another Job Permission instance already exists with readAll, writeAll, or disableAll set to true";
	public static final String MULTIPLE_TRIGGER_TYPES = "Only one instance of each trigger type (except ScheduleTrigger) is allowed";
	public static final String CONFLICTING_PERMISSIONS = "Only one of readAll, writeAll, or disableAll can be set to true at a time";
	public static final String LABELS_AND_GROUP_NULL = "Either args or entrypoint must be defined";
	public static final String LABELS_AND_GROUP_EMPTY = "Labels and group cannot both be empty strings";
	public static final String ARGS_AND_ENTRYPOINT_NULL = "Either args or entrypoint must be defined";
	public static final String ARGS_AND_ENTRYPOINT_EMPTY = "Args and entrypoint cannot both be empty strings";
	public static final String INVALID_CRON_SYNTAX = "Not a valid Cron syntax. Ensure that the pattern follows the format: [minute] [hour] [day of month] [month] [day of week], where each field is separated by a space.";
	public static final String MISSING_JOBS = "Referenced job do not exist. Reference existing jobs";
	public static final String DUPLICATE_JOB_NAME = "Duplicate job name found: %s. Choose a different name for the job to ensure uniqueness within the pipeline.";
	public static final String INVALID_CONDITION_PATTERN = "Invalid condition pattern. If condition is negated, ensure the condition starts and ends with the correct characters: ${{...}}, '', \"\", or ()";
	public static final String INVALID_COMBINATION = "The specified event or activity type combination is not valid. Please check the event and activity types specified in the rule and ensure they match the allowed combinations.";
	public static final String MANDATORY_STRING_EMPTY = "%s cannot be empty";
	
	// Error codes
	public static final String DUPLICATE_PIPELINE_PERMISSION_ERRORCODE = "DUPLICATE_PIPELINE_PERMISSION";
	public static final String DUPLICATE_JOB_PERMISSION_ERRORCODE = "DUPLICATE_JOB_PERMISSION";
	public static final String MULTIPLE_TRIGGER_TYPES_ERRORCODE = "MULTIPLE_TRIGGER_TYPES";
	public static final String CONFLICTING_PERMISSIONS_ERRORCODE = "CONFLICTING_PERMISSIONS";
	public static final String LABELS_AND_GROUP_NULL_ERRORCODE = "LABELS_AND_GROUP_NULL";
	public static final String LABELS_AND_GROUP_EMPTY_ERRORCODE = "LABELS_AND_GROUP_EMPTY";
	public static final String ARGS_AND_ENTRYPOINT_NULL_ERRORCODE = "ARGS_AND_ENTRYPOINT_NULL";
	public static final String ARGS_AND_ENTRYPOINT_EMPTY_ERRORCODE = "ARGS_AND_ENTRYPOINT_EMPTY";
	public static final String INVALID_CRON_SYNTAX_ERRORCODE = "INVALID_CRON_SYNTAX";
	public static final String MISSING_JOBS_ERRORCODE = "MISSING_JOBS";
	public static final String DUPLICATE_JOB_NAME_ERRORCODE = "DUPLICATE_JOB_NAME";
	public static final String INVALID_CONDITION_PATTERN_ERRORCODE = "INVALID_CONDITION_PATTERN";
	public static final String INVALID_COMBINATION_ERRORCODE = "INVALID_COMBINATION";
	
	public static final String MANDATORY_CREDENTIALS_USERNAME_EMPTY_ERRORCODE = "MANDATORY_CREDENTIALS_USERNAME_EMPTY";
    public static final String MANDATORY_CREDENTIALS_PASSWORD_EMPTY_ERRORCODE = "MANDATORY_CREDENTIALS_PASSWORD_EMPTY";
    public static final String MANDATORY_JOB_NAME_EMPTY_ERRORCODE = "MANDATORY_JOB_NAME_EMPTY";
    public static final String MANDATORY_DOCKER_IMAGE_EMPTY_ERRORCODE = "MANDATORY_DOCKER_IMAGE_EMPTY";
    public static final String MANDATORY_DOCKER_USES_EMPTY_ERRORCODE = "MANDATORY_DOCKER_USES_EMPTY";
    public static final String MANDATORY_SERVICE_NAME_EMPTY_ERRORCODE = "MANDATORY_SERVICE_NAME_EMPTY";
    public static final String MANDATORY_COMMAND_NAME_EMPTY_ERRORCODE = "MANDATORY_COMMAND_NAME_EMPTY";
    public static final String MANDATORY_PARAMETER_NAME_EMPTY_ERRORCODE = "MANDATORY_PARAMETER_NAME_EMPTY";
    public static final String MANDATORY_NEED_JOBS_EMPTY_ERRORCODE = "MANDATORY_NEED_JOBS_EMPTY";
    public static final String MANDATORY_ARTIFACT_PATHS_EMPTY_ERRORCODE = "MANDATORY_ARTIFACT_PATHS_EMPTY";
    public static final String MANDATORY_ARTIFACT_USES_EMPTY_ERRORCODE = "MANDATORY_ARTIFACT_USES_EMPTY";
    public static final String MANDATORY_RESTORECACHE_PATHS_EMPTY_ERRORCODE = "MANDATORY_RESTORECACHE_PATHS_EMPTY";
    public static final String MANDATORY_RESTORECACHE_USES_EMPTY_ERRORCODE = "MANDATORY_RESTORECACHE_USES_EMPTY";
    public static final String MANDATORY_RESTORECACHE_KEY_EMPTY_ERRORCODE = "MANDATORY_RESTORECACHE_KEY_EMPTY";
    public static final String MANDATORY_SAVECACHE_PATHS_EMPTY_ERRORCODE = "MANDATORY_SAVECACHE_PATHS_EMPTY";
    public static final String MANDATORY_SAVECACHE_USES_EMPTY_ERRORCODE = "MANDATORY_SAVECACHE_USES_EMPTY";
    public static final String MANDATORY_SAVECACHE_KEY_EMPTY_ERRORCODE = "MANDATORY_SAVECACHE_KEY_EMPTY";
    public static final String MANDATORY_ENVIRONMENT_NAME_EMPTY_ERRORCODE = "MANDATORY_ENVIRONMENT_NAME_EMPTY";
    public static final String MANDATORY_ACTION_USES_EMPTY_ERRORCODE = "MANDATORY_ACTION_USES_EMPTY";
    public static final String MANDATORY_OUTPUT_NAME_EMPTY_ERRORCODE = "MANDATORY_OUTPUT_NAME_EMPTY";
    public static final String MANDATORY_OUTPUT_VALUE_EMPTY_ERRORCODE = "MANDATORY_OUTPUT_VALUE_EMPTY";
    public static final String MANDATORY_SCHEDULETRIGGER_CRON_EMPTY_ERRORCODE = "MANDATORY_SCHEDULETRIGGER_CRON_EMPTY";
    public static final String MANDATORY_SECRET_KEY_EMPTY_ERRORCODE = "MANDATORY_SECRET_KEY_EMPTY";
    public static final String MANDATORY_SECRET_VALUE_EMPTY_ERRORCODE = "MANDATORY_SECRET_VALUE_EMPTY";
    public static final String MANDATORY_SECRET_NAME_EMPTY_ERRORCODE = "MANDATORY_SECRET_NAME_EMPTY";
    public static final String MANDATORY_PERMISSION_TYPE_EMPTY_ERRORCODE = "MANDATORY_PERMISSION_TYPE_EMPTY";
    public static final String MANDATORY_ENV_KEY_EMPTY_ERRORCODE = "MANDATORY_ENV_KEY_EMPTY";
    public static final String MANDATORY_ENV_VALUE_EMPTY_ERRORCODE = "MANDATORY_ENV_VALUE_EMPTY";
    public static final String MANDATORY_CONCURRENCY_GROUP_EMPTY_ERRORCODE = "MANDATORY_CONCURRENCY_GROUP_EMPTY";
    public static final String MANDATORY_IF_CONDITION_EMPTY_ERRORCODE = "MANDATORY_IF_CONDITION_EMPTY";
    public static final String MANDATORY_MATRIXCONFIG_KEY_EMPTY_ERRORCODE = "MANDATORY_MATRIXCONFIG_KEY_EMPTY";
    public static final String MANDATORY_MATRIXCONFIG_VALUES_EMPTY_ERRORCODE = "MANDATORY_MATRIXCONFIG_VALUES_EMPTY";
    public static final String MANDATORY_INPUTPARAMS_KEY_EMPTY_ERRORCODE = "MANDATORY_INPUTPARAMS_KEY_EMPTY";
    public static final String MANDATORY_INPUTPARAMS_VALUE_EMPTY_ERRORCODE = "MANDATORY_INPUTPARAMS_VALUE_EMPTY";
    public static final String MANDATORY_DEFAULTSETTING_SHELL_EMPTY_ERRORCODE = "MANDATORY_DEFAULTSETTING_SHELL_EMPTY";
    public static final String MANDATORY_DEFAULTSETTING_WORKINGDIRECTORY_EMPTY_ERRORCODE = "MANDATORY_DEFAULTSETTING_WORKINGDIRECTORY_EMPTY";
    public static final String MANDATORY_PATH_NAME_EMPTY_ERRORCODE = "MANDATORY_PATH_NAME_EMPTY";
    public static final String MANDATORY_BRANCH_NAME_EMPTY_ERRORCODE = "MANDATORY_BRANCH_NAME_EMPTY";
    public static final String MANDATORY_TAG_NAME_EMPTY_ERRORCODE = "MANDATORY_TAG_NAME_EMPTY";
    public static final String MANDATORY_WORKFLOWRUNTRIGGER_WORKFLOW_EMPTY_ERRORCODE = "MANDATORY_WORKFLOWRUNTRIGGER_WORKFLOW_EMPTY";
    public static final String MANDATORY_WORKFLOWRUNTRIGGER_TYPE_EMPTY_ERRORCODE = "MANDATORY_WORKFLOWRUNTRIGGER_TYPE_EMPTY";
    public static final String MANDATORY_CONTAINER_IMAGE_EMPTY_ERRORCODE = "MANDATORY_CONTAINER_IMAGE_EMPTY";
    public static final String MANDATORY_INPUT_NAME_EMPTY_ERRORCODE = "MANDATORY_INPUT_NAME_EMPTY";
	
	@Check
	public void checkUniquePipelinePermissionInstance(Permission perm) {
		int count = 0;
		EObject container = perm.eContainer();
		
		if(container instanceof Pipeline) {
			for (Permission permission : ((Pipeline) container).getPermissions()) {
				if (permission.isReadAll() || permission.isWriteAll() || permission.isDisableAll()) {
					count++;
					if (count > 1) {
						error(DUPLICATE_PIPELINE_PERMISSION, permission, null, DUPLICATE_PIPELINE_PERMISSION_ERRORCODE);
					}
				}
			}
		}
		
		if(container instanceof Job) {
			for (Permission permission : ((Job) container).getPermissions()) {
				if (permission.isReadAll() || permission.isWriteAll() || permission.isDisableAll()) {
					count++;
					if (count > 1) {
						error(DUPLICATE_JOB_PERMISSION, permission, null, DUPLICATE_JOB_PERMISSION_ERRORCODE);
					}
				}
			}
		}
	}
	
	@Check
	public void checkUniqueTriggerTypes(Trigger trigger) {
		if (!(trigger instanceof ScheduleTrigger)) {
			int count = 0;
			Pipeline pipeline = (Pipeline) trigger.eContainer();
			for (Trigger t : pipeline.getTriggers()) {
				if (t.getClass().equals(trigger.getClass())) {
					count++;
				}
			}
			if (count > 1) {
				error(MULTIPLE_TRIGGER_TYPES, trigger, null, MULTIPLE_TRIGGER_TYPES_ERRORCODE);
			}
		}
	}

	@Check
	public void checkNoConflictingPermissions(Permission permission) {
		boolean readAll = permission.isReadAll();
		boolean writeAll = permission.isWriteAll();
		boolean disableAll = permission.isDisableAll();

		if (readAll && (writeAll || disableAll)) {
			EStructuralFeature readAllFeature = permission.eClass().getEStructuralFeature("readAll");
			error(CONFLICTING_PERMISSIONS, permission, readAllFeature, CONFLICTING_PERMISSIONS_ERRORCODE);
		}

		if (writeAll && (readAll || disableAll)) {
			EStructuralFeature writeAllFeature = permission.eClass().getEStructuralFeature("writeAll");
			error(CONFLICTING_PERMISSIONS, permission, writeAllFeature, CONFLICTING_PERMISSIONS_ERRORCODE);
		}

		if (disableAll && (readAll || writeAll)) {
			EStructuralFeature disableAllFeature = permission.eClass().getEStructuralFeature("disableAll");
			error(CONFLICTING_PERMISSIONS, permission, disableAllFeature, CONFLICTING_PERMISSIONS_ERRORCODE);
		}
	}
	
	@Check
	public void checkLabelsAndGroupNotNull(Runs_On runsOn) {
		if (runsOn.getGroup() == null && runsOn.getLabels() == null) {
			EStructuralFeature labelsFeature = runsOn.eClass().getEStructuralFeature("labels");
			error(LABELS_AND_GROUP_NULL, runsOn, labelsFeature, LABELS_AND_GROUP_NULL_ERRORCODE);
		}
	}

	@Check
	public void checkLabelsAndGroupNotEmpty(Runs_On runsOn) {
		if ((runsOn.getGroup().isEmpty() && runsOn.getLabels().stream().anyMatch(label -> label.equals(""))) || (!runsOn.getLabels().stream().anyMatch(label -> label.equals("")) && runsOn.getGroup().isEmpty()) || (!runsOn.getLabels().isEmpty() && runsOn.getLabels().stream().anyMatch(label -> label.equals("")) && !runsOn.getGroup().isEmpty())) {
			EStructuralFeature labelsFeature = runsOn.eClass().getEStructuralFeature("labels");
			error(LABELS_AND_GROUP_EMPTY, runsOn, labelsFeature, LABELS_AND_GROUP_EMPTY_ERRORCODE);
		}
	}
	
	@Check
	public void checkArgsAndEntrypointNotNull(InputPair inputPair) {
		if (inputPair.getArgs() == null && inputPair.getEntrypoint() == null) {
			EStructuralFeature argsFeature = inputPair.eClass().getEStructuralFeature("args");
			error(ARGS_AND_ENTRYPOINT_NULL, inputPair, argsFeature, ARGS_AND_ENTRYPOINT_NULL_ERRORCODE);
		}
	}

	@Check
	public void checkArgsAndEntrypointNotEmpty(InputPair inputPair) {
		if (inputPair.getArgs().isEmpty() && inputPair.getEntrypoint().isEmpty()) {
			EStructuralFeature argsFeature = inputPair.eClass().getEStructuralFeature("args");
			error(ARGS_AND_ENTRYPOINT_EMPTY, inputPair, argsFeature, ARGS_AND_ENTRYPOINT_EMPTY_ERRORCODE);
		}
	}

	@Check
	public void checkValidCronSyntax(ScheduleTrigger trigger) {
		if (!trigger.getCron().matches("(?:[0-9]|1[0-9]|2[0-3]|H|L|\\*|\\?|[0-5]?[0-9]|\\*/[0-9]+) (?:[0-9]|1[0-9]|2[0-3]|\\*|L|\\?|[01]?[0-9]|2[0-9]|3[01]|W|L\\-?[0-6]|#[1-5]|\\*/[0-9]+) (?:[0-9]|1[0-9]|2[0-3]|\\*|L|\\?|[01]?[0-9]|2[0-9]|3[01]|W|L\\-?[0-6]|#[1-5]) (?:[0-9]|1[0-2]|\\*|L|\\?|\\*/[0-9]+) (?:[0-7]|\\*|L|\\?|#[1-5])")) {
			EStructuralFeature timerFeature = trigger.eClass().getEStructuralFeature("cron");
			error(INVALID_CRON_SYNTAX, trigger, timerFeature, INVALID_CRON_SYNTAX_ERRORCODE);
		}
	}

    @Check
    public void checkJobsExist(Need need) {
    	Job job = (Job) need.eContainer();
    	Pipeline pipeline = (Pipeline) job.eContainer();
        for (String jobName : need.getJobs()) {
            if (pipeline.getJobs().stream().noneMatch(j -> j.getName().equals(jobName))) {
            	int index = need.getJobs().indexOf(jobName);
            	EStructuralFeature jobsFeature = need.eClass().getEStructuralFeature("jobs");
                error(MISSING_JOBS, need, jobsFeature, index, MISSING_JOBS_ERRORCODE);
            }
        }
    }

    @Check
    public void checkNonDuplicateJobName(Job job) {
        Pipeline pipeline = (Pipeline) job.eContainer();
        for (Job otherJob : pipeline.getJobs()) {
            if (otherJob != job && otherJob.getName().equals(job.getName())) {
            	EStructuralFeature nameFeature = job.eClass().getEStructuralFeature("name");
                error(String.format(DUPLICATE_JOB_NAME, job.getName()), job, nameFeature, DUPLICATE_JOB_NAME_ERRORCODE);
            }
        }
    }
    
    @Check
    public void checkValidCondition(If ifCondition) {
        if (ifCondition.getCondition().contains("!") &&
                        !(ifCondition.getCondition().startsWith("${{") && ifCondition.getCondition().endsWith("}}") ||
                                ifCondition.getCondition().startsWith("'") && ifCondition.getCondition().endsWith("'") ||
                                ifCondition.getCondition().startsWith("\"") && ifCondition.getCondition().endsWith("\"") ||
                                ifCondition.getCondition().startsWith("(") && ifCondition.getCondition().endsWith(")"))) {
            EStructuralFeature conditionFeature = ifCondition.eClass().getEStructuralFeature("condition");
            error(INVALID_CONDITION_PATTERN, ifCondition, conditionFeature, INVALID_CONDITION_PATTERN_ERRORCODE);
        }
    }

    @Check
	public void checkValidEventActivityType(StandardEventTrigger trigger) {
	    EVENTS event = trigger.getEvent();
	    List<WEBHOOK_ACTIVITY_TYPES> activityTypes = trigger.getActivityType();
	    EStructuralFeature activityTypeFeature = trigger.eClass().getEStructuralFeature("activityType");

	    if (event == EVENTS.BRANCH_PROTECTION_CONFIGURATION) {
            for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
                if (activity != WEBHOOK_ACTIVITY_TYPES.DISABLED && activity != WEBHOOK_ACTIVITY_TYPES.ENABLED) {
                    error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
                    break;
                }
            }
	    } 
	    else if (event == EVENTS.BRANCH_PROTECTION_RULE) {
           for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.DELETED && activity != WEBHOOK_ACTIVITY_TYPES.EDITED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.CHECK_RUN) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.COMPLETED && activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.REQUESTED_ACTION && activity != WEBHOOK_ACTIVITY_TYPES.REREQUESTED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.CHECK_SUITE) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.COMPLETED && activity != WEBHOOK_ACTIVITY_TYPES.REQUESTED && activity != WEBHOOK_ACTIVITY_TYPES.REREQUESTED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.CODE_SCANNING_ALERT) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.APPEARED_IN_BRANCH && activity != WEBHOOK_ACTIVITY_TYPES.CLOSED_BY_USER && activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.FIXED && activity != WEBHOOK_ACTIVITY_TYPES.REOPENED && activity != WEBHOOK_ACTIVITY_TYPES.REOPENED_BY_USER) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.CUSTOM_PROPERTY) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.DELETED && activity != WEBHOOK_ACTIVITY_TYPES.UPDATED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.DEPENDABOT_ALERT) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.AUTO_DISMISSED && activity != WEBHOOK_ACTIVITY_TYPES.AUTO_REOPENED && activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.DISMISSED && activity != WEBHOOK_ACTIVITY_TYPES.FIXED && activity != WEBHOOK_ACTIVITY_TYPES.REINTRODUCED && activity != WEBHOOK_ACTIVITY_TYPES.REOPENED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.DEPLOY_KEY) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.DELETED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.DEPLOYMENT_REVIEW) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.APPROVED && activity != WEBHOOK_ACTIVITY_TYPES.REJECTED && activity != WEBHOOK_ACTIVITY_TYPES.REQUESTED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.DISCUSSION) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.ANSWERED && activity != WEBHOOK_ACTIVITY_TYPES.CATEGORY_CHANGED && activity != WEBHOOK_ACTIVITY_TYPES.CLOSED && activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.DELETED && activity != WEBHOOK_ACTIVITY_TYPES.EDITED && activity != WEBHOOK_ACTIVITY_TYPES.LABELED && activity != WEBHOOK_ACTIVITY_TYPES.PINNED && activity != WEBHOOK_ACTIVITY_TYPES.REOPENED && activity != WEBHOOK_ACTIVITY_TYPES.TRANSFERRED && activity != WEBHOOK_ACTIVITY_TYPES.UNANSWERED && activity != WEBHOOK_ACTIVITY_TYPES.UNLABELED && activity != WEBHOOK_ACTIVITY_TYPES.UNLOCKED && activity != WEBHOOK_ACTIVITY_TYPES.UNPINNED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.DISCUSSION_COMMENT) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.DELETED && activity != WEBHOOK_ACTIVITY_TYPES.EDITED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.INSTALLATION) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.DELETED && activity != WEBHOOK_ACTIVITY_TYPES.NEW_PERMISSIONS_ACCEPTED && activity != WEBHOOK_ACTIVITY_TYPES.SUSPEND_UNSUSPEND) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.INSTALLATION_REPOSITORIES) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.ADDED && activity != WEBHOOK_ACTIVITY_TYPES.REMOVED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.ISSUE_COMMENT) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.DELETED && activity != WEBHOOK_ACTIVITY_TYPES.EDITED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.ISSUES) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.ASSIGNED && activity != WEBHOOK_ACTIVITY_TYPES.CLOSED && activity != WEBHOOK_ACTIVITY_TYPES.DELETED && activity != WEBHOOK_ACTIVITY_TYPES.DEMILESTONED && activity != WEBHOOK_ACTIVITY_TYPES.EDITED && activity != WEBHOOK_ACTIVITY_TYPES.LABELED && activity != WEBHOOK_ACTIVITY_TYPES.LOCKED && activity != WEBHOOK_ACTIVITY_TYPES.MILESTONED && activity != WEBHOOK_ACTIVITY_TYPES.OPENED && activity != WEBHOOK_ACTIVITY_TYPES.PINNED && activity != WEBHOOK_ACTIVITY_TYPES.REOPENED && activity != WEBHOOK_ACTIVITY_TYPES.TRANSFERRED && activity != WEBHOOK_ACTIVITY_TYPES.UNASSIGNED && activity != WEBHOOK_ACTIVITY_TYPES.UNLABELED && activity != WEBHOOK_ACTIVITY_TYPES.UNLOCKED && activity != WEBHOOK_ACTIVITY_TYPES.UNPINNED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.LABEL) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.DELETED && activity != WEBHOOK_ACTIVITY_TYPES.EDITED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.MARKETPLACE_PURCHASE) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.CANCELLED && activity != WEBHOOK_ACTIVITY_TYPES.CHANGED && activity != WEBHOOK_ACTIVITY_TYPES.PENDING_CHANGE && activity != WEBHOOK_ACTIVITY_TYPES.PENDING_CHANGE_CANCELLED && activity != WEBHOOK_ACTIVITY_TYPES.PURCHASED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.MEMBER) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.ADDED && activity != WEBHOOK_ACTIVITY_TYPES.EDITED && activity != WEBHOOK_ACTIVITY_TYPES.REMOVED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.MEMBERSHIP) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.ADDED && activity != WEBHOOK_ACTIVITY_TYPES.REMOVED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.MERGE_GROUP) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.CHECKS_REQUESTED && activity != WEBHOOK_ACTIVITY_TYPES.DESTROYED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.MILESTONE) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.CLOSED && activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.DELETED && activity != WEBHOOK_ACTIVITY_TYPES.EDITED && activity != WEBHOOK_ACTIVITY_TYPES.OPENED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.ORG_BLOCK) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.BLOCKED && activity != WEBHOOK_ACTIVITY_TYPES.UNBLOCKED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.ORGANIZATION) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.DELETED && activity != WEBHOOK_ACTIVITY_TYPES.MEMBER_ADDED && activity != WEBHOOK_ACTIVITY_TYPES.MEMBER_INVITED && activity != WEBHOOK_ACTIVITY_TYPES.MEMBER_REMOVED && activity != WEBHOOK_ACTIVITY_TYPES.RENAMED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.PACKAGE) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.PUBLISHED && activity != WEBHOOK_ACTIVITY_TYPES.UPDATED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.PERSONAL_ACCESS_TOKEN_REQUEST) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.APPROVED && activity != WEBHOOK_ACTIVITY_TYPES.CANCELLED && activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.DENIED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.PROJECT_CARD) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.CONVERTED && activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.DELETED && activity != WEBHOOK_ACTIVITY_TYPES.EDITED && activity != WEBHOOK_ACTIVITY_TYPES.MOVED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.PROJECT) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.CLOSED && activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.DELETED && activity != WEBHOOK_ACTIVITY_TYPES.EDITED && activity != WEBHOOK_ACTIVITY_TYPES.REOPENED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.PROJECT_COLUMN) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.DELETED && activity != WEBHOOK_ACTIVITY_TYPES.EDITED && activity != WEBHOOK_ACTIVITY_TYPES.MOVED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.PROJECTS_V2) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.DELETED && activity != WEBHOOK_ACTIVITY_TYPES.EDITED && activity != WEBHOOK_ACTIVITY_TYPES.CLOSED && activity != WEBHOOK_ACTIVITY_TYPES.REOPENED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.PROJECTS_V2_ITEM) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.DELETED && activity != WEBHOOK_ACTIVITY_TYPES.EDITED && activity != WEBHOOK_ACTIVITY_TYPES.ARCHIVED && activity != WEBHOOK_ACTIVITY_TYPES.CONVERTED && activity != WEBHOOK_ACTIVITY_TYPES.REORDERED && activity != WEBHOOK_ACTIVITY_TYPES.RESTORED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.PULL_REQUEST) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.ASSIGNED && activity != WEBHOOK_ACTIVITY_TYPES.AUTO_MERGE_DISABLED && activity != WEBHOOK_ACTIVITY_TYPES.AUTO_MERGE_ENABLED && activity != WEBHOOK_ACTIVITY_TYPES.CLOSED && activity != WEBHOOK_ACTIVITY_TYPES.CONVERTED_TO_DRAFT && activity != WEBHOOK_ACTIVITY_TYPES.DEMILESTONED && activity != WEBHOOK_ACTIVITY_TYPES.DEQUEUED && activity != WEBHOOK_ACTIVITY_TYPES.EDITED && activity != WEBHOOK_ACTIVITY_TYPES.ENQUEUED && activity != WEBHOOK_ACTIVITY_TYPES.LABELED && activity != WEBHOOK_ACTIVITY_TYPES.LOCKED && activity != WEBHOOK_ACTIVITY_TYPES.MILESTONED && activity != WEBHOOK_ACTIVITY_TYPES.OPENED && activity != WEBHOOK_ACTIVITY_TYPES.READY_FOR_REVIEW && activity != WEBHOOK_ACTIVITY_TYPES.REOPENED && activity != WEBHOOK_ACTIVITY_TYPES.REVIEW_REQUEST_REMOVED && activity != WEBHOOK_ACTIVITY_TYPES.REVIEW_REQUESTED && activity != WEBHOOK_ACTIVITY_TYPES.SYNCHRONIZE && activity != WEBHOOK_ACTIVITY_TYPES.UNASSIGNED && activity != WEBHOOK_ACTIVITY_TYPES.UNLABELED && activity != WEBHOOK_ACTIVITY_TYPES.UNLOCKED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.PULL_REQUEST_REVIEW_COMMENT) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.DELETED && activity != WEBHOOK_ACTIVITY_TYPES.EDITED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.PULL_REQUEST_REVIEW) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.DISMISSED && activity != WEBHOOK_ACTIVITY_TYPES.SUBMITTED && activity != WEBHOOK_ACTIVITY_TYPES.EDITED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.PULL_REQUEST_REVIEW_THREAD) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.RESOLVED && activity != WEBHOOK_ACTIVITY_TYPES.UNRESOLVED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.REGISTRY_PACKAGE) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.PUBLISHED && activity != WEBHOOK_ACTIVITY_TYPES.UPDATED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.RELEASE) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.DELETED && activity != WEBHOOK_ACTIVITY_TYPES.EDITED && activity != WEBHOOK_ACTIVITY_TYPES.PRERELEASED && activity != WEBHOOK_ACTIVITY_TYPES.PUBLISHED && activity != WEBHOOK_ACTIVITY_TYPES.RELEASED && activity != WEBHOOK_ACTIVITY_TYPES.UNPUBLISHED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.REPOSITORY_ADVISORY) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.PUBLISHED && activity != WEBHOOK_ACTIVITY_TYPES.REPORTED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.REPOSITORY) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.ARCHIVED && activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.DELETED && activity != WEBHOOK_ACTIVITY_TYPES.EDITED && activity != WEBHOOK_ACTIVITY_TYPES.PRIVATIZED && activity != WEBHOOK_ACTIVITY_TYPES.PUBLICIZED && activity != WEBHOOK_ACTIVITY_TYPES.RENAMED && activity != WEBHOOK_ACTIVITY_TYPES.TRANSFERRED && activity != WEBHOOK_ACTIVITY_TYPES.UNARCHIVED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.REPOSITORY_RULESET) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.EDITED && activity != WEBHOOK_ACTIVITY_TYPES.DELETED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.REPOSITORY_VULNERABILITY_ALERT) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.CREATE && activity != WEBHOOK_ACTIVITY_TYPES.DISMISS && activity != WEBHOOK_ACTIVITY_TYPES.REOPEN && activity != WEBHOOK_ACTIVITY_TYPES.RESOLVE) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.SECRET_SCANNING_ALERT) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.REOPENED && activity != WEBHOOK_ACTIVITY_TYPES.RESOLVED && activity != WEBHOOK_ACTIVITY_TYPES.REVOKED && activity != WEBHOOK_ACTIVITY_TYPES.VALIDATED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.SECURITY_ADVISORY) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.PUBLISHED && activity != WEBHOOK_ACTIVITY_TYPES.UPDATED && activity != WEBHOOK_ACTIVITY_TYPES.WITHDRAWN) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.SPONSORSHIP) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.CANCELLED && activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.EDITED && activity != WEBHOOK_ACTIVITY_TYPES.PENDING_CANCELLATION && activity != WEBHOOK_ACTIVITY_TYPES.PENDING_TIER_CHANGE && activity != WEBHOOK_ACTIVITY_TYPES.TIER_CHANGED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.STAR) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.DELETED) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.TEAM) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.ADDED_TO_REPOSITORY && activity != WEBHOOK_ACTIVITY_TYPES.CREATED && activity != WEBHOOK_ACTIVITY_TYPES.EDITED && activity != WEBHOOK_ACTIVITY_TYPES.DELETED && activity != WEBHOOK_ACTIVITY_TYPES.REMOVED_FROM_REPOSITORY) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else if (event == EVENTS.WORKFLOW_JOB) {
        	for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	            if (activity != WEBHOOK_ACTIVITY_TYPES.COMPLETED && activity != WEBHOOK_ACTIVITY_TYPES.IN_PROGRESS && activity != WEBHOOK_ACTIVITY_TYPES.QUEUED && activity != WEBHOOK_ACTIVITY_TYPES.WAITING) {
	            	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                break;
	            }
            }
        } else {
	            for (WEBHOOK_ACTIVITY_TYPES activity : activityTypes) {
	                if (activity != WEBHOOK_ACTIVITY_TYPES.NONE) {
	                	error(INVALID_COMBINATION, trigger, activityTypeFeature, INVALID_COMBINATION_ERRORCODE);
	                    break;
	                }
	            }
	        }
	}
	
    
    /*
	 * Validators to check mandatory attributes
	 */
    
    @Check
    public void checkNameNotEmpty(Credentials credentials) {
        checkMandatoryStringNotEmpty(credentials.getUsername(), "Credentials username", credentials, "username", MANDATORY_CREDENTIALS_USERNAME_EMPTY_ERRORCODE);
        checkMandatoryStringNotEmpty(credentials.getPassword(), "Credentials password", credentials, "password", MANDATORY_CREDENTIALS_PASSWORD_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(Job job) {
        checkMandatoryStringNotEmpty(job.getName(), "Job name", job, "name", MANDATORY_JOB_NAME_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(Docker docker) {
        checkMandatoryStringNotEmpty(docker.getImage(), "Docker image", docker, "image", MANDATORY_DOCKER_IMAGE_EMPTY_ERRORCODE);
        checkMandatoryStringNotEmpty(docker.getUses(), "Docker uses", docker, "uses", MANDATORY_DOCKER_USES_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(Service service) {
        checkMandatoryStringNotEmpty(service.getName(), "Step name", service, "name", MANDATORY_SERVICE_NAME_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(Command command) {
        checkMandatoryStringNotEmpty(command.getName(), "Command name", command, "name", MANDATORY_COMMAND_NAME_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(Parameter parameter) {
        checkMandatoryStringNotEmpty(parameter.getParameter(), "Parameter name", parameter, "parameter", MANDATORY_PARAMETER_NAME_EMPTY_ERRORCODE);
    }


    @Check
    public void checkNameNotEmpty(Artifact artifact) {
        checkMandatoryListNotEmpty(artifact.getPaths(), "Artifact paths", artifact, "paths", MANDATORY_ARTIFACT_PATHS_EMPTY_ERRORCODE);
        checkMandatoryStringNotEmpty(artifact.getUses(), "Artifact uses", artifact, "uses", MANDATORY_ARTIFACT_USES_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(RestoreCache cache) {
        checkMandatoryListNotEmpty(cache.getPaths(), "RestoreCache paths", cache, "paths", MANDATORY_RESTORECACHE_PATHS_EMPTY_ERRORCODE);
        checkMandatoryStringNotEmpty(cache.getUses(), "RestoreCache uses", cache, "uses", MANDATORY_RESTORECACHE_USES_EMPTY_ERRORCODE);
        checkMandatoryStringNotEmpty(cache.getKey(), "RestoreCache key", cache, "key", MANDATORY_RESTORECACHE_KEY_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(SaveCache cache) {
        checkMandatoryListNotEmpty(cache.getPaths(), "SaveCache paths", cache, "paths", MANDATORY_SAVECACHE_PATHS_EMPTY_ERRORCODE);
        checkMandatoryStringNotEmpty(cache.getUses(), "SaveCache uses", cache, "uses", MANDATORY_SAVECACHE_USES_EMPTY_ERRORCODE);
        checkMandatoryStringNotEmpty(cache.getKey(), "SaveCache key", cache, "key", MANDATORY_SAVECACHE_KEY_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(Environment environment) {
        checkMandatoryStringNotEmpty(environment.getName(), "Environment name", environment, "name", MANDATORY_ENVIRONMENT_NAME_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(Action action) {
        checkMandatoryStringNotEmpty(action.getUses(), "Action uses", action, "uses", MANDATORY_ACTION_USES_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(Output output) {
        checkMandatoryStringNotEmpty(output.getName(), "Output name", output, "name", MANDATORY_OUTPUT_NAME_EMPTY_ERRORCODE);
        checkMandatoryStringNotEmpty(output.getValue(), "Output value", output, "value", MANDATORY_OUTPUT_VALUE_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(ScheduleTrigger trigger) {
    	checkMandatoryStringNotEmpty(trigger.getCron(), "ScheduleTrigger cron", trigger, "cron", MANDATORY_SCHEDULETRIGGER_CRON_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(Secret secret) {
        checkMandatoryStringNotEmpty(secret.getKey(), "Secret key", secret, "key", MANDATORY_SECRET_KEY_EMPTY_ERRORCODE);
        checkMandatoryStringNotEmpty(secret.getValue(), "Secret value", secret, "value", MANDATORY_SECRET_VALUE_EMPTY_ERRORCODE);
        checkMandatoryStringNotEmpty(secret.getName(), "Secret name", secret, "name", MANDATORY_SECRET_NAME_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(Permission permission) {
        checkMandatoryStringNotEmpty(permission.getPermission().toString(), "Permission type", permission, "permission", MANDATORY_PERMISSION_TYPE_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(Env env) {
        checkMandatoryStringNotEmpty(env.getKey(), "Env key", env, "key", MANDATORY_ENV_KEY_EMPTY_ERRORCODE);
        checkMandatoryStringNotEmpty(env.getValue(), "Env value", env, "value", MANDATORY_ENV_VALUE_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(Concurrency concurrency) {
        checkMandatoryStringNotEmpty(concurrency.getGroup(), "Concurrency group", concurrency, "group", MANDATORY_CONCURRENCY_GROUP_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(If ifCondition) {
        checkMandatoryStringNotEmpty(ifCondition.getCondition(), "If condition", ifCondition, "condition", MANDATORY_IF_CONDITION_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(MatrixConfig matrixConfig) {
        checkMandatoryStringNotEmpty(matrixConfig.getKey(), "Matrix configuration key", matrixConfig, "key", MANDATORY_MATRIXCONFIG_KEY_EMPTY_ERRORCODE);
        checkMandatoryListNotEmpty(matrixConfig.getValues(), "Matrix configuration values", matrixConfig, "values", MANDATORY_MATRIXCONFIG_VALUES_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(InputParams params) {
        checkMandatoryStringNotEmpty(params.getKey(), "InputParams key", params, "key", MANDATORY_INPUTPARAMS_KEY_EMPTY_ERRORCODE);
        checkMandatoryStringNotEmpty(params.getValue(), "InputParams value", params, "value", MANDATORY_INPUTPARAMS_VALUE_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(DefaultSetting defaultSetting) {
        checkMandatoryStringNotEmpty(defaultSetting.getShell(), "Default setting shell", defaultSetting, "shell", MANDATORY_DEFAULTSETTING_SHELL_EMPTY_ERRORCODE);
        checkMandatoryStringNotEmpty(defaultSetting.getWorkingDirectory(), "Default setting working directory", defaultSetting, "workingDirectory", MANDATORY_DEFAULTSETTING_WORKINGDIRECTORY_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(Path path) {
        checkMandatoryStringNotEmpty(path.getName(), "Path name", path, "name", MANDATORY_PATH_NAME_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(Branch branch) {
        checkMandatoryStringNotEmpty(branch.getName(), "Branch name", branch, "name", MANDATORY_BRANCH_NAME_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(Tag tag) {
        checkMandatoryStringNotEmpty(tag.getName(), "Tag name", tag, "name", MANDATORY_TAG_NAME_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(WorkflowRunTrigger trigger) {
        checkMandatoryStringNotEmpty(trigger.getWorkflow(), "WorkflowRunTrigger workflow", trigger, "workflow", MANDATORY_WORKFLOWRUNTRIGGER_WORKFLOW_EMPTY_ERRORCODE);
        checkMandatoryStringNotEmpty(trigger.getType(), "WorkflowRunTrigger type", trigger, "type", MANDATORY_WORKFLOWRUNTRIGGER_TYPE_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(Container container) {
        checkMandatoryStringNotEmpty(container.getImage(), "Container image", container, "image", MANDATORY_CONTAINER_IMAGE_EMPTY_ERRORCODE);
    }

    @Check
    public void checkNameNotEmpty(Input input) {
        checkMandatoryStringNotEmpty(input.getName(), "Input name", input, "name", MANDATORY_INPUT_NAME_EMPTY_ERRORCODE);
    }
    
    /*
     * Auxiliary methods
     */
    
    private void checkMandatoryStringNotEmpty(String value, String errorMessage, Object object, String featureName, String errorCode) {
        if (value == null || value.trim().isEmpty()) {
            EStructuralFeature feature = ((EObject) object).eClass().getEStructuralFeature(featureName);
            error(errorMessage, (EObject) object, feature, errorCode);
        }
    }
    
    private void checkMandatoryListNotEmpty(List<String> values, String errorMessage, Object object, String featureName, String errorCode) {
        if (values.isEmpty() || values.stream().anyMatch(value -> value.equals(""))) {
            EStructuralFeature feature = ((EObject) object).eClass().getEStructuralFeature(featureName);
            error(errorMessage, (EObject) object, feature, errorCode);
        }
    }
}
