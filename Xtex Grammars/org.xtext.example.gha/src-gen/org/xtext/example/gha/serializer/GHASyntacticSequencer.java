/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.gha.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.gha.services.GHAGrammarAccess;

@SuppressWarnings("all")
public class GHASyntacticSequencer extends AbstractSyntacticSequencer {

	protected GHAGrammarAccess grammarAccess;
	protected AbstractElementAlias match_Pipeline_NEWLINETerminalRuleCall_2_1_q;
	protected AbstractElementAlias match_Pipeline_NEWLINETerminalRuleCall_3_1_q;
	protected AbstractElementAlias match_Pipeline_NEWLINETerminalRuleCall_4_1_q;
	protected AbstractElementAlias match_Pipeline_NEWLINETerminalRuleCall_5_1_q;
	protected AbstractElementAlias match_Pipeline_NEWLINETerminalRuleCall_6_1_q;
	protected AbstractElementAlias match_Pipeline_NEWLINETerminalRuleCall_7_1_q;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (GHAGrammarAccess) access;
		match_Pipeline_NEWLINETerminalRuleCall_2_1_q = new TokenAlias(false, true, grammarAccess.getPipelineAccess().getNEWLINETerminalRuleCall_2_1());
		match_Pipeline_NEWLINETerminalRuleCall_3_1_q = new TokenAlias(false, true, grammarAccess.getPipelineAccess().getNEWLINETerminalRuleCall_3_1());
		match_Pipeline_NEWLINETerminalRuleCall_4_1_q = new TokenAlias(false, true, grammarAccess.getPipelineAccess().getNEWLINETerminalRuleCall_4_1());
		match_Pipeline_NEWLINETerminalRuleCall_5_1_q = new TokenAlias(false, true, grammarAccess.getPipelineAccess().getNEWLINETerminalRuleCall_5_1());
		match_Pipeline_NEWLINETerminalRuleCall_6_1_q = new TokenAlias(false, true, grammarAccess.getPipelineAccess().getNEWLINETerminalRuleCall_6_1());
		match_Pipeline_NEWLINETerminalRuleCall_7_1_q = new TokenAlias(false, true, grammarAccess.getPipelineAccess().getNEWLINETerminalRuleCall_7_1());
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getBEGINRule())
			return getBEGINToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getENDRule())
			return getENDToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getNEWLINERule())
			return getNEWLINEToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getBEGINToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * Synthetic terminal rule. The concrete syntax is to be specified by clients.
	 * Defaults to the empty string.
	 */
	protected String getENDToken(EObject semanticObject, RuleCall ruleCall, INode node) { return ""; }
	
	/**
	 * terminal NEWLINE:
	 *     '\r'? '\n';
	 */
	protected String getNEWLINEToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "\n";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_Pipeline_NEWLINETerminalRuleCall_2_1_q.equals(syntax))
				emit_Pipeline_NEWLINETerminalRuleCall_2_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Pipeline_NEWLINETerminalRuleCall_3_1_q.equals(syntax))
				emit_Pipeline_NEWLINETerminalRuleCall_3_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Pipeline_NEWLINETerminalRuleCall_4_1_q.equals(syntax))
				emit_Pipeline_NEWLINETerminalRuleCall_4_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Pipeline_NEWLINETerminalRuleCall_5_1_q.equals(syntax))
				emit_Pipeline_NEWLINETerminalRuleCall_5_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Pipeline_NEWLINETerminalRuleCall_6_1_q.equals(syntax))
				emit_Pipeline_NEWLINETerminalRuleCall_6_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_Pipeline_NEWLINETerminalRuleCall_7_1_q.equals(syntax))
				emit_Pipeline_NEWLINETerminalRuleCall_7_1_q(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     envs+=Env (ambiguity) concurrency=Concurrency
	 *     envs+=Env (ambiguity) defaultsetting=DefaultSetting
	 *     envs+=Env (ambiguity) jobs+=Job
	 *     envs+=Env (ambiguity) permissions+=Permission
	 *     envs+=Env (ambiguity) triggers+=Trigger
	 
	 * </pre>
	 */
	protected void emit_Pipeline_NEWLINETerminalRuleCall_2_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     permissions+=Permission (ambiguity) concurrency=Concurrency
	 *     permissions+=Permission (ambiguity) defaultsetting=DefaultSetting
	 *     permissions+=Permission (ambiguity) jobs+=Job
	 *     permissions+=Permission (ambiguity) triggers+=Trigger
	 
	 * </pre>
	 */
	protected void emit_Pipeline_NEWLINETerminalRuleCall_3_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     defaultsetting=DefaultSetting (ambiguity) concurrency=Concurrency
	 *     defaultsetting=DefaultSetting (ambiguity) jobs+=Job
	 *     defaultsetting=DefaultSetting (ambiguity) triggers+=Trigger
	 
	 * </pre>
	 */
	protected void emit_Pipeline_NEWLINETerminalRuleCall_4_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     concurrency=Concurrency (ambiguity) jobs+=Job
	 *     concurrency=Concurrency (ambiguity) triggers+=Trigger
	 
	 * </pre>
	 */
	protected void emit_Pipeline_NEWLINETerminalRuleCall_5_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     triggers+=Trigger (ambiguity) jobs+=Job
	 
	 * </pre>
	 */
	protected void emit_Pipeline_NEWLINETerminalRuleCall_6_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * <pre>
	 * Ambiguous syntax:
	 *     NEWLINE?
	 *
	 * This ambiguous syntax occurs at:
	 *     jobs+=Job (ambiguity) (rule end)
	 
	 * </pre>
	 */
	protected void emit_Pipeline_NEWLINETerminalRuleCall_7_1_q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
