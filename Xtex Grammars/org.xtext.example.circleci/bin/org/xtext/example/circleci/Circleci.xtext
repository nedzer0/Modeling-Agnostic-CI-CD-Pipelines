// automatically generated by Xtext
grammar org.xtext.example.circleci.Circleci with org.eclipse.xtext.common.Terminals

import "http://www.example.org/circleCI_metamodel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Pipeline returns Pipeline:
	('Pipeline' NEWLINE)
	((setup?='setup') NEWLINE)?
	('version' version=EString NEWLINE)
	((orbs+=Orb)+ NEWLINE?)?
	((commands+=Command)+ NEWLINE?)?
	((executors+=Executor)+ NEWLINE?)?
	((jobs+=Job)+ NEWLINE?)
	((workflows+=Workflow)+ NEWLINE?)?
;


Executor returns Executor:
	Machine | MacOs | Docker;

enum MACHINE_RESOURCE_TYPE returns MACHINE_RESOURCE_TYPE:
				MEDIUM = 'medium' | LARGE = 'large' | XLARGE = 'xlarge' | TWO_XLARGE = '2xlarge' | TWO_XLARGE_PLUS = '2xlarge+';

enum MACOS_RESOURCE_TYPE returns MACOS_RESOURCE_TYPE:
				MACOS_X86_MEDIUM_GEN2 = 'macos.x86.medium.gen2*' | MACOS_M1_MEDIUM_GEN = 'macos.m1.medium.gen' | MACOS_M1_LARGE_GEN1 = 'macos.m1.large.gen1';

enum DOCKER_RESOURCE_TYPE returns DOCKER_RESOURCE_TYPE:
				SMALL = 'small' | MEDIUM = 'medium' | MEDIUM_PLUS = 'medium+' | LARGE = 'large' | XLARGE = 'xlarge' | TWO_XLARGE = '2xlarge' | TWO_XLARGE_PLUS = '2xlarge+';

Step returns Step:
	Run | RestoreCache | PersistToWorkspace | StoreArtifact | StoreTestResults | SetupRemoteDocker | AddSSHKeys | SaveCache | AttachWorkspace | When_Unless | Checkout;


Orb returns Orb:
	'Orb'
	(BEGIN
		'key' key=EString
		'value' value=EString
	END);

Command returns Command:
	'Command'
	(BEGIN
		'name' name=EString
		('description' description=EString)?
		(parameters+=Parameter)*
		(steps+=Step)+
	END);

Workflow returns Workflow:
	'Workflow'
	(BEGIN
		'name' name=EString 
		'version' version=EString
		(triggers+=Trigger)*
		(branches+=Branch)*
		(when_unless=When_Unless)?
		(jobworkflow+=JobWorkflow)+
	END);

Job returns Job:
	'Job'
	(BEGIN
		('name' name=EString)
		('parallelism' parallelism=EShort)?
		('reuseExecutor' reuseExecutor=EString)?
		(executors+=Executor)*
		(environments+=Environment)*
		(parameters+=Parameter)*
		(steps+=Step)+
	END);

EString returns ecore::EString:
	STRING | ID;

EBooleanObject returns ecore::EBooleanObject:
	'true' | 'false';

Parameter returns Parameter:
	'Parameter'
	(BEGIN
		'name' name=EString 
		'type' type=PARAMETER_TYPES 
		('default' default=EString )?
		('description' description=EString )?
		('enumValues' enumValues+=EString (',' enumValues+=EString)*)?
	END);

Run returns Run:
	'Run'
	(BEGIN
		('name' name=EString)?
		(background?='background')?
		('when' when=WHEN_TYPE)?
		('working_directory' working_directory=EString)?
		('no_output_timeout' no_output_timeout=EString)?
		('shell' shell=EString)?
		(environments+=Environment)*
		(run_commands+=RunCommand)+
		(parameters+=Parameters)*
	END);

RestoreCache returns RestoreCache:
	'RestoreCache'
	(BEGIN
		('name' name=EString)? 
		'key' key=EString 
		'keys' keys+=EString (',' keys+=EString)* 
	END);

PersistToWorkspace returns PersistToWorkspace:
	'PersistToWorkspace'
	(BEGIN
		('name' name=EString)? 
		'root' root=EString 
		'paths' paths+=EString (',' paths+=EString)*
	END);

StoreArtifact returns StoreArtifact:
	'StoreArtifact'
	(BEGIN
		('name' name=EString)? 
		'path' path=EString 
		('destination' destination=EString)?
	END);

StoreTestResults returns StoreTestResults:
	'StoreTestResults'
	(BEGIN
		('name' name=EString )?
		'path' path=EString
	END);

SetupRemoteDocker returns SetupRemoteDocker:
	{SetupRemoteDocker}
	'SetupRemoteDocker'
	(BEGIN
		('name' name=EString)? 
		(docker_layer_caching?='docker_layer_caching' )?
		('version' version=EString)?
	END);

AddSSHKeys returns AddSSHKeys:
	{AddSSHKeys}
	'AddSSHKeys'
	(BEGIN
		('name' name=EString)? 
		('fingerprints' fingerprints+=EString (',' fingerprints+=EString) )?
	END);

SaveCache returns SaveCache:
	'SaveCache'
	(BEGIN
		('name' name=EString)?
		'paths' paths+=EString (',' paths+=EString)* 
		'key' key=EString 
		('when' when=WHEN_TYPE)?
	END);

AttachWorkspace returns AttachWorkspace:
	'AttachWorkspace'
	(BEGIN
		('name' name=EString)?
		'at' at=EString
	END);

When_Unless returns When_Unless:
	'When_Unless'
	(BEGIN
		('name' name=EString)?
		'condition' condition=EString 
		'when_step' (BEGIN (when_step+=Step)+ END) 
		('unless_step' (BEGIN (unless_step+=Step)+ END) )?
	END);

Checkout returns Checkout:
	{Checkout}
	'Checkout'
	(BEGIN
		('name' name=EString)? 
		('path' path=EString)?
	END)?;

enum WHEN_TYPE returns WHEN_TYPE:
				on_success = 'on_success' | always = 'always' | on_fail = 'on_fail';

Environment returns Environment:
	'Environment'
	(BEGIN
		'key' key=EString 
		'value' value=EString
	END);

RunCommand returns RunCommand:
	{RunCommand}
	'RunCommand'
	(BEGIN
		'name' name=EString
	END);

Parameters returns Parameters:
	'Parameters'
	(BEGIN
		'parameter' parameter=EString
	END);

enum PARAMETER_TYPES returns PARAMETER_TYPES:
				STRING = 'STRING' | BOOLEAN = 'BOOLEAN' | INTEGER = 'INTEGER' | ENUM = 'ENUM' | EXECUTOR = 'EXECUTOR' | STEPS = 'STEPS' | ENVIRONMENT_VARIABLE_NAME = 'ENVIRONMENT_VARIABLE_NAME';

Trigger returns Trigger:
	'Trigger'
	(BEGIN
		'cron' cron=EString
	END);

Branch returns Branch:
	'Branch'
	(BEGIN
		'name' name=EString 
		'branch' branch=BRANCH_TYPE
	END);

JobWorkflow returns JobWorkflow:
	{JobWorkflow}
	'JobWorkflow'
	(BEGIN 
		'name' name=EString 
		(approvalJob?='approvalJob' )?
		('requires'requires+=EString (',' requires+=EString)* )?
		('context' context+=EString (',' context+=EString)* )?
		(branches+=Branch)*
		(matrix=Matrix)?
	END);

enum BRANCH_TYPE returns BRANCH_TYPE:
				only = 'only' | ignore = 'ignore';

Matrix returns Matrix:
	'Matrix'
	(BEGIN
		('alias' alias=EString )?
		('matrix_exclude' (BEGIN (matrix_exclude+=MatrixParams)* END) )?
		'matrix_params' (BEGIN (matrix_params+=MatrixParams)+ END) 
	END);

MatrixParams returns MatrixParams:
	'MatrixParams'
	(BEGIN
		'key' key=EString 
		'values' values+=EString (',' values+=EString)*
	END);

EInt returns ecore::EInt:
	'-'? INT;
	
EShort returns ecore::EShort:
	'-'? INT;

Machine returns Machine:
	'Machine'
	(BEGIN
		'name' name=EString
		'image' image=EString 
		(docker_layer_caching?='docker_layer_caching')?
		'resourceClass' resourceClass=MACHINE_RESOURCE_TYPE 
		('shell' shell=EString )?
		('working_directory' working_directory=EString )?
		(environments+=Environment)*
	END);

MacOs returns MacOs:
	'MacOs'
	(BEGIN
		'name' name=EString
		('xcode' xcode=EString)
		('resourceClass' resourceClass=MACOS_RESOURCE_TYPE)
		('shell' shell=EString)?
		('working_directory' working_directory=EString)?
		(environments+=Environment)*
	END);
	

Docker returns Docker:
	'Docker'
	(BEGIN
		'name' name=EString
		'image' image=EString 
		'resourceClass' resourceClass=DOCKER_RESOURCE_TYPE 
		('shell' shell=EString )?
		('working_directory' working_directory=EString )?
		('entrypoint' entrypoint+=EString (',' entrypoint+=EString)* )?
		('command' command+=EString (',' command+=EString)* )?
		('user' user=EString )?
		(environments+=Environment)*
		(docker_auth=Docker_Auth)?
		(docker_aws_auth=Docker_Aws_Auths)?
	END);

Docker_Auth returns Docker_Auth:
	'Docker_Auth'
	(BEGIN
		'username' username=EString 
		'password' password=EString
	END);

Docker_Aws_Auths returns Docker_Aws_Auths:
	'Docker_Aws_Auths'
	(BEGIN
		'aws_access_key_id' aws_access_key_id=EString 
		'aws_secret_access_key' aws_secret_access_key=EString
	END);


terminal NEWLINE:
// New line on DOS or Unix 
    '\r'? '\n';

terminal BEGIN: 'synthetic:BEGIN';  // increase indentation
terminal END: 'synthetic:END';      // decrease indentation