/**
 * generated by Xtext 2.34.0
 */
package org.xtext.example.circleci.formatting2;

import circleCI_metamodel.Command;
import circleCI_metamodel.Executor;
import circleCI_metamodel.Job;
import circleCI_metamodel.Orb;
import circleCI_metamodel.Parameter;
import circleCI_metamodel.Pipeline;
import circleCI_metamodel.Step;
import circleCI_metamodel.Workflow;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.circleci.services.CircleciGrammarAccess;

@SuppressWarnings("all")
public class CircleciFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private CircleciGrammarAccess _circleciGrammarAccess;

  protected void _format(final Pipeline pipeline, @Extension final IFormattableDocument document) {
    EList<Orb> _orbs = pipeline.getOrbs();
    for (final Orb orb : _orbs) {
      document.<Orb>format(orb);
    }
    EList<Command> _commands = pipeline.getCommands();
    for (final Command command : _commands) {
      document.<Command>format(command);
    }
    EList<Executor> _executors = pipeline.getExecutors();
    for (final Executor executor : _executors) {
      document.<Executor>format(executor);
    }
    EList<Job> _jobs = pipeline.getJobs();
    for (final Job job : _jobs) {
      document.<Job>format(job);
    }
    document.<Workflow>format(pipeline.getWorkflow());
  }

  protected void _format(final Command command, @Extension final IFormattableDocument document) {
    EList<Parameter> _parameters = command.getParameters();
    for (final Parameter parameter : _parameters) {
      document.<Parameter>format(parameter);
    }
    EList<Step> _steps = command.getSteps();
    for (final Step step : _steps) {
      document.<Step>format(step);
    }
  }

  public void format(final Object command, final IFormattableDocument document) {
    if (command instanceof XtextResource) {
      _format((XtextResource)command, document);
      return;
    } else if (command instanceof Command) {
      _format((Command)command, document);
      return;
    } else if (command instanceof Pipeline) {
      _format((Pipeline)command, document);
      return;
    } else if (command instanceof EObject) {
      _format((EObject)command, document);
      return;
    } else if (command == null) {
      _format((Void)null, document);
      return;
    } else if (command != null) {
      _format(command, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(command, document).toString());
    }
  }
}
