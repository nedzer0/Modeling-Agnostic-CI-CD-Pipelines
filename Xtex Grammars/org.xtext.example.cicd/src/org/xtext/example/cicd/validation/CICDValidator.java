/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.cicd.validation;

import java.util.List;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EStructuralFeature;
import org.eclipse.xtext.validation.Check;

import cICD_metamodel.Command;
import cICD_metamodel.DockerContainer;
import cICD_metamodel.Environment;
import cICD_metamodel.IfStep;
import cICD_metamodel.Input;
import cICD_metamodel.Job;
import cICD_metamodel.MatrixConfig;
import cICD_metamodel.Output;
import cICD_metamodel.Parameters;
import cICD_metamodel.Pipeline;
import cICD_metamodel.ScheduleTrigger;


/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class CICDValidator extends AbstractCICDValidator {
	
	public static final String INVALID_CRON_SYNTAX = "Not a valid Cron syntax. Ensure that the pattern follows the format: [minute] [hour] [day of month] [month] [day of week], where each field is separated by a space";
	public static final String INVALID_CONDITION_PATTERN = "Invalid condition pattern. If condition is negated, ensure the condition starts and ends with the correct characters: ${{...}}, '', \"\", or ()";
	public static final String INVALID_BOOLEAN_DEFAULT = "Boolean type must have default value set to 'true' or 'false'";
	public static final String DUPLICATE_JOB_NAME = "Duplicate job name found: %s. Choose a different name for the job to ensure uniqueness within the pipeline.";
	public static final String REQUIRED_JOB_NOT_EXIST = "Required Job does not exist: %s. Select an existing pipeline Job.";
	public static final String MANDATORY_STRING_EMPTY = "%s cannot be empty";
	
	// Error codes
	public static final String INVALID_CRON_SYNTAX_ERRORCODE = "INVALID_CRON_SYNTAX";
	public static final String INVALID_CONDITION_PATTERN_ERRORCODE = "INVALID_CONDITION_PATTERN";
	public static final String INVALID_BOOLEAN_DEFAULT_ERRORCODE = "INVALID_BOOLEAN_DEFAULT";
	public static final String DUPLICATE_JOB_NAME_ERRORCODE = "DUPLICATE_JOB_NAME";
	public static final String REQUIRED_JOB_NOT_EXIST_ERRORCODE = "REQUIRED_JOB_NOT_EXIST";
	
	public static final String MANDATORY_JOB_NAME_EMPTY_ERRORCODE = "MANDATORY_JOB_NAME_EMPTY";
	public static final String MANDATORY_OUTPUT_NAME_EMPTY_ERRORCODE = "MANDATORY_OUTPUT_NAME_EMPTY";
	public static final String MANDATORY_OUTPUT_VALUE_EMPTY_ERRORCODE = "MANDATORY_OUTPUT_VALUE_EMPTY";
	public static final String MANDATORY_DOCKER_IMAGE_EMPTY_ERRORCODE = "MANDATORY_DOCKER_IMAGE_EMPTY";
	public static final String MANDATORY_COMMAND_NAME_EMPTY_ERRORCODE = "MANDATORY_COMMAND_NAME_EMPTY";
	public static final String MANDATORY_ENVIRONMENT_KEY_EMPTY_ERRORCODE = "MANDATORY_ENVIRONMENT_KEY_EMPTY";
	public static final String MANDATORY_ENVIRONMENT_VALUE_EMPTY_ERRORCODE = "MANDATORY_ENVIRONMENT_VALUE_EMPTY";
	public static final String MANDATORY_PARAMETER_EMPTY_ERRORCODE = "MANDATORY_PARAMETER_EMPTY";
	public static final String MANDATORY_MATRIX_CONFIG_NAME_EMPTY_ERRORCODE = "MANDATORY_MATRIX_CONFIG_NAME_EMPTY";
	public static final String MANDATORY_MATRIX_CONFIG_VALUES_EMPTY_ERRORCODE = "MANDATORY_MATRIX_CONFIG_VALUES_EMPTY";
	public static final String MANDATORY_INPUT_NAME_EMPTY_ERRORCODE = "MANDATORY_INPUT_NAME_EMPTY";
	public static final String MANDATORY_SCHEDULE_TRIGGER_TIMER_EMPTY_ERRORCODE = "MANDATORY_SCHEDULE_TRIGGER_TIMER_EMPTY";
	public static final String MANDATORY_IF_STEP_CONDITION_EMPTY_ERRORCODE = "MANDATORY_IF_STEP_CONDITION_EMPTY";
	
	
	@Check
	public void checkValidCronSyntax(ScheduleTrigger trigger) {
	    if (!trigger.getTimer().matches("(?:[0-9]|1[0-9]|2[0-3]|H|L|\\*|\\?|[0-5]?[0-9]|\\*/[0-9]+) (?:[0-9]|1[0-9]|2[0-3]|\\*|L|\\?|[01]?[0-9]|2[0-9]|3[01]|W|L\\-?[0-6]|#[1-5]|\\*/[0-9]+) (?:[0-9]|1[0-9]|2[0-3]|\\*|L|\\?|[01]?[0-9]|2[0-9]|3[01]|W|L\\-?[0-6]|#[1-5]) (?:[0-9]|1[0-2]|\\*|L|\\?|\\*/[0-9]+) (?:[0-7]|\\*|L|\\?|#[1-5])")) {
	    	EStructuralFeature timerFeature = trigger.eClass().getEStructuralFeature("timer");
			error(INVALID_CRON_SYNTAX, trigger, timerFeature, INVALID_CRON_SYNTAX_ERRORCODE);
	    }
	}


	@Check
    public void checkValidCondition(IfStep ifCondition) {
        if (ifCondition.getCondition().contains("!") &&
                        !(ifCondition.getCondition().startsWith("${{") && ifCondition.getCondition().endsWith("}}") ||
                                ifCondition.getCondition().startsWith("'") && ifCondition.getCondition().endsWith("'") ||
                                ifCondition.getCondition().startsWith("\"") && ifCondition.getCondition().endsWith("\"") ||
                                ifCondition.getCondition().startsWith("(") && ifCondition.getCondition().endsWith(")"))) {
            EStructuralFeature conditionFeature = ifCondition.eClass().getEStructuralFeature("condition");
            error(INVALID_CONDITION_PATTERN, ifCondition, conditionFeature, INVALID_CONDITION_PATTERN_ERRORCODE);
        }
    }
	
	
	@Check
    public void validateBooleanInputDefaultValue(Input input) {
        if (input.getType().getLiteral().equals("BOOLEAN") && (!input.getDefault().equals("true") && !input.getDefault().equals("false"))) {
        	EStructuralFeature defaultFeature = input.eClass().getEStructuralFeature("default");
            error(INVALID_BOOLEAN_DEFAULT, input, defaultFeature, INVALID_BOOLEAN_DEFAULT_ERRORCODE);
        }
    }


	@Check
    public void checkNonDuplicateJobName(Job job) {
        if (job.eContainer() instanceof Pipeline) {
        	Pipeline pipeline = (Pipeline) job.eContainer();
	        for (Job otherJob : pipeline.getJobs()) {
	            if (otherJob != job && otherJob.getName().equals(job.getName())) {
	            	EStructuralFeature nameFeature = job.eClass().getEStructuralFeature("name");
	                error(String.format(DUPLICATE_JOB_NAME, job.getName()), job, nameFeature, DUPLICATE_JOB_NAME_ERRORCODE);
	            }
	        }
        }
    }


	@Check
    public void checkRequiredJobExists(Job job) {
        if (job.eContainer() instanceof Pipeline && !job.getRequireJobs().isEmpty()) {
        	Pipeline pipeline = (Pipeline) job.eContainer();
            for (String requireJob : job.getRequireJobs()) {
            	boolean jobExists = false;
                for (Job j : pipeline.getJobs()) {
                    if (requireJob.equals(j.getName())) {
                        jobExists = true;
                        break;
                    }
                }
                if (!jobExists) {
                	int index = job.getRequireJobs().indexOf(requireJob);
                	EStructuralFeature requireJobFeature = job.eClass().getEStructuralFeature("requireJobs");
                    error(String.format(REQUIRED_JOB_NOT_EXIST, requireJob), job, requireJobFeature, index, REQUIRED_JOB_NOT_EXIST_ERRORCODE);
                }
            }
        }
    }
	
	
	/*
	 * Validators to check mandatory attributes
	 */	
	
	@Check
	public void checkNameNotEmpty(Job job) {
	    checkMandatoryStringNotEmpty(job.getName(), String.format(MANDATORY_STRING_EMPTY, "Job name"), job, "name", MANDATORY_JOB_NAME_EMPTY_ERRORCODE);
	}

	@Check
	public void checkNameNotEmpty(Output output) {
	    checkMandatoryStringNotEmpty(output.getName(), String.format(MANDATORY_STRING_EMPTY, "Output name"), output, "name", MANDATORY_OUTPUT_NAME_EMPTY_ERRORCODE);
	    checkMandatoryStringNotEmpty(output.getValue(), String.format(MANDATORY_STRING_EMPTY, "Output value"), output, "value", MANDATORY_OUTPUT_VALUE_EMPTY_ERRORCODE);
	}

	@Check
	public void checkImageNotEmpty(DockerContainer docker) {
	    checkMandatoryStringNotEmpty(docker.getImage(), String.format(MANDATORY_STRING_EMPTY, "DockerContainer image"), docker, "image", MANDATORY_DOCKER_IMAGE_EMPTY_ERRORCODE);
	}

	@Check
	public void checkNameNotEmpty(Command command) {
	    checkMandatoryStringNotEmpty(command.getName(), String.format(MANDATORY_STRING_EMPTY, "Command name"), command, "name", MANDATORY_COMMAND_NAME_EMPTY_ERRORCODE);
	}

	@Check
	public void checkKeyNotEmpty(Environment environment) {
	    checkMandatoryStringNotEmpty(environment.getKey(), String.format(MANDATORY_STRING_EMPTY, "Environment key"), environment, "key", MANDATORY_ENVIRONMENT_KEY_EMPTY_ERRORCODE);
	    checkMandatoryStringNotEmpty(environment.getValue(), String.format(MANDATORY_STRING_EMPTY, "Environment value"), environment, "value", MANDATORY_ENVIRONMENT_VALUE_EMPTY_ERRORCODE);
	}

	@Check
	public void checkParameterNotEmpty(Parameters parameters) {
	    checkMandatoryStringNotEmpty(parameters.getParameter(), String.format(MANDATORY_STRING_EMPTY, "Parameter"), parameters, "parameter", MANDATORY_PARAMETER_EMPTY_ERRORCODE);
	}

	@Check
	public void checkAttributeNotEmpty(MatrixConfig matrixConfig) {
	    checkMandatoryStringNotEmpty(matrixConfig.getName(), String.format(MANDATORY_STRING_EMPTY, "MatrixConfig name"), matrixConfig, "name", MANDATORY_MATRIX_CONFIG_NAME_EMPTY_ERRORCODE);
	    checkMandatoryListNotEmpty(matrixConfig.getValues(), String.format(MANDATORY_STRING_EMPTY, "MatrixConfig values"), matrixConfig, "values", MANDATORY_MATRIX_CONFIG_VALUES_EMPTY_ERRORCODE);
	}

	@Check
	public void checkNameNotEmpty(Input input) {
	    checkMandatoryStringNotEmpty(input.getName(), String.format(MANDATORY_STRING_EMPTY, "Input name"), input, "name", MANDATORY_INPUT_NAME_EMPTY_ERRORCODE);
	}

	@Check
	public void checkTimerNotEmpty(ScheduleTrigger trigger) {
	    checkMandatoryStringNotEmpty(trigger.getTimer(), String.format(MANDATORY_STRING_EMPTY, "ScheduleTrigger timer"), trigger, "timer", MANDATORY_SCHEDULE_TRIGGER_TIMER_EMPTY_ERRORCODE);
	}

	@Check
	public void checkConditionNotEmpty(IfStep ifStep) {
	    checkMandatoryStringNotEmpty(ifStep.getCondition(), String.format(MANDATORY_STRING_EMPTY, "IfStep condition"), ifStep, "condition", MANDATORY_IF_STEP_CONDITION_EMPTY_ERRORCODE);
	}
    
    
    
    /*
     * Auxiliary methods
     */

    private void checkMandatoryStringNotEmpty(String value, String errorMessage, Object object, String featureName, String errorCode) {
        if (value == null || value.trim().isEmpty()) {
            EStructuralFeature feature = ((EObject) object).eClass().getEStructuralFeature(featureName);
            error(errorMessage, (EObject) object, feature, errorCode);
        }
    }
    
    private void checkMandatoryListNotEmpty(List<String> values, String errorMessage, Object object, String featureName, String errorCode) {
        if (values.isEmpty() || values.stream().anyMatch(value -> value.equals(""))) {
            EStructuralFeature feature = ((EObject) object).eClass().getEStructuralFeature(featureName);
            error(errorMessage, (EObject) object, feature, errorCode);
        }
    }
}
