// automatically generated by Xtext
grammar org.xtext.example.cicd.CICD with org.eclipse.xtext.common.Terminals

import "http://www.example.org/cICD_metamodel" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Pipeline returns Pipeline:
	'Pipeline'
	((BEGIN'name' name=EString END))?
	((jobs+=Job)+ NEWLINE?)
	((pipeline_environment+=Environment)+ NEWLINE?)?
	((triggers+=ScheduleTrigger)+ NEWLINE?)?
	((agents+=Agent)+ NEWLINE?)?
	((inputs+=Input)+ NEWLINE?)?
	((output+=Output)+ NEWLINE?)?
;


Job returns Job:
	'Job' 
	(BEGIN
		'name' name=EString
		(allowFaillure?='allowFaillure')?
		('parallel' parallel=EString)?
		('requireJobs' requireJobs+=EString (',' requireJobs+=EString)*)?
		(IfStep+=IfStep)*
		(artifacts+=Artifact)*
		(environments+=Environment)*
		(jobs+=Job)*
		(matrix=Matrix)?
		(agents+=Agent)*
		(output+=Output)*
		(steps+=Step)*
	END)
;


Environment returns Environment:
	'Environment'
	(BEGIN
		'key' key=EString 
		'value' value=EString
	END)
	;

ScheduleTrigger returns ScheduleTrigger:
	'ScheduleTrigger'
	(BEGIN
		'timer' timer=EString
	END)
	;

Agent returns Agent:
	{Agent}
	'Agent'
	(BEGIN
		('labels' labels+=EString (',' labels+=EString)*)?
		(container=DockerContainer)?
	END)
	;

EString returns ecore::EString:
	STRING | ID;

Input returns Input:
	'Input'
	(BEGIN
		('name' name=EString ) 
		('type' type=INPUT_TYPE ) 
		(('default' default=EString) )?
		(('description' description=EString) )?
		('values' values+=EString (',' values+=EString)* )?
	END)
	;

Output returns Output:
	'Output'
	(BEGIN
		'name' name=EString 
		'value' value=EString
	END)
	;

Step returns Step:
	'Step'
	(BEGIN
		(cache+=Cache)*
		(environments+=Environment)*
		(IfStep=IfStep)?
		(commands+=Command)+  
		(parameters+=Parameters)*
	END)
	;

IfStep returns IfStep:
	'IfStep'
	(BEGIN
		'condition' condition=EString 
		('if_steps' if_steps+=Step)*  
		('else_steps' else_steps+=Step)*  
	END)
	;

Artifact returns Artifact:
	{Artifact}
	'Artifact'
	(BEGIN
		('name' name=EString)?
		('message' message=EString )?
		('path'  path+=EString (',' path+=EString)* )?
		('type' type=ARTIFACT_TYPE)?
	END)
	;

Matrix returns Matrix:
	'Matrix'
	(BEGIN
		('name' name=EString)?
		(steps+=Step)*
		(jobs+=Job)*
		(configs+=MatrixConfig)+  
	END)
	;

EBooleanObject returns ecore::EBooleanObject:
	'true' | 'false';

Command returns Command:
	{Command}
	'Command'
	(BEGIN
		'name' name=EString
	END)
	;

Parameters returns Parameters:
	'Parameters'
	(BEGIN
		'parameter' parameter=EString
	END)
	;

Cache returns Cache:
	'Cache'
	(BEGIN
		'mode' mode=CACHE_MODE 
		('paths' paths+=EString (',' paths+=EString)*)? 
		('key' key=EString)?
		('keys' keys+=EString (',' keys+=EString)*)?
	END)
	;

enum CACHE_MODE returns CACHE_MODE:
				STORE = 'STORE' | LOAD = 'LOAD' | BOTH = 'BOTH';

enum ARTIFACT_TYPE returns ARTIFACT_TYPE:
				UPLOAD = 'UPLOAD' | DOWNLOAD = 'DOWNLOAD';

MatrixConfig returns MatrixConfig:
	'MatrixConfig'
	(BEGIN
		'name' name=EString 
		('values' (values+=EString) (',' values+=EString)*) 
		'type' type=MATRIX_CONFIG_TYPE
	END)
	;

enum MATRIX_CONFIG_TYPE returns MATRIX_CONFIG_TYPE:
				DEFAULT = 'DEFAULT' | INCLUDE = 'INCLUDE' | EXCLUDE = 'EXCLUDE';

DockerContainer returns DockerContainer:
	'DockerContainer'
	(BEGIN
		'image' image=EString 
		('username' username=EString )? 
		('password' password=EString )?
		(environments+=Environment)*
	END)
	;

enum INPUT_TYPE returns INPUT_TYPE:
				STRING = 'STRING' | NUMBER = 'NUMBER' | BOOLEAN = 'BOOLEAN' | SECRET = 'SECRET' | CHOICE = 'CHOICE' | PASSWORD = 'PASSWORD' | TEXT = 'TEXT';

terminal NEWLINE:
// New line on DOS or Unix 
    '\r'? '\n';
    
terminal BEGIN: 'synthetic:BEGIN';  // increase indentation
terminal END: 'synthetic:END';      // decrease indentation
