[comment encoding = UTF-8 /]
[module generate('http://www.example.org/circleCI_metamodel')]


[template public generateElement(aPipeline : Pipeline)]
[comment @main/]
[file ('CircleCI' + '.yml', false, 'UTF-8')]
version: [aPipeline.version/]
[if (aPipeline.setup) ]
setup: [aPipeline.setup/]
[/if]
[generateOrbs(aPipeline)/]
[generateCommands(aPipeline)/]
[generateExecutors(aPipeline)/]
[generateJobs(aPipeline)/]
[generateWorkflows(aPipeline)/]
[/file]
[/template]


[template public generateOrbs(aPipeline : Pipeline)]
[if (aPipeline.orbs->notEmpty()) ]
orbs:
[for (o: Orb | aPipeline.orbs)]
  [o.key/]: [o.value/]
[/for]
[/if]
[/template]

[template public generateCommands(aPipeline : Pipeline)]
[if (aPipeline.commands->notEmpty()) ]
commands:
[for (c: Command | aPipeline.commands)]
  [c.name/]:
  [if (c.description->notEmpty())]
    description: [c.description/]
  [/if]
  [if (c.parameters->notEmpty())]
    parameters:
    [for (p: Parameter | c.parameters)]
      [generateParameters(p)/]
    [/for]
  [/if]
    steps:
    [for (s: Step | c.steps)]
      [generateStep(s)/]
    [/for]
[/for]
[/if]
[/template]

[template public generateParameters(param : Parameter)]
[param.name/]:
  type: [param.type.toString().toLowerCase()/]
  default: [param.default/]
[if (param.description->notEmpty())]
  description: [param.description/]
[/if]
[if (param.enumValues->notEmpty())]
  enum: ['['/][for (val: String | param.enumValues)][val/][if (not (val = param.enumValues->last()))], [/if][/for][']'/]
[/if]
[/template]

[comment: Execution Environment for Docker, Machine and MacOs/]
[template public generateExecutors(aPipeline : Pipeline)]
[if (aPipeline.executors->notEmpty()) ]
executors:
[for (e: Executor | aPipeline.executors)]
  [e.name/]:
    [generateExec(e)/]
[/for]
[/if]
[/template]

[template public generateExec(e : Executor)]
[if (e.oclIsKindOf(Docker))]
docker:
  [generateDockerExecEnv(oclAsType(Docker))/]
[/if]
[if (e.oclIsKindOf(Machine))]
machine:
  [generateMachineExecEnv(oclAsType(Machine))/]
[/if]
[if (e.oclIsKindOf(MacOs))]
macos:
  [generateMacExecEnv(oclAsType(MacOs))/]
[/if]
resource_class: [generateExecResourceClass(e)/]
[if (e.shell->notEmpty())]
shell: [shell/]
[/if]
[if (e.working_directory->notEmpty() and e.working_directory <> '')]
working_directory: [e.working_directory/]
[/if]
[if (e.environments->notEmpty())]
environment:
[for (env : Environment | e.environments)]
  [generateEnvironment(env)/]
[/for]
[/if]
[/template]

[template public generateExecResourceClass(e : Executor)]
[if (e.oclIsKindOf(Docker))]
[let resourceClass : String = oclAsType(Docker).resourceClass.toString()]
[if resourceClass = 'medium_plus']
['medium+'/]
[/if]
[if resourceClass = 'two_xlarge']
['2xlarge'/]
[/if]
[if resourceClass = 'two_xlarge_plus']
['2xlarge+'/]
[/if]
[if resourceClass <> 'medium_plus' and resourceClass <> 'two_xlarge' and resourceClass <> 'two_xlarge_plus']
[resourceClass/]
[/if]
[/let]
[/if]
[if (e.oclIsKindOf(Machine))]
[let resourceClass : String = oclAsType(Machine).resourceClass.toString()]
[if resourceClass = 'two_xlarge']
['2xlarge'/]
[/if]
[if resourceClass = 'two_xlarge_plus']
['2xlarge+'/]
[/if]
[if resourceClass <> 'two_xlarge' and resourceClass <> 'two_xlarge_plus']
[resourceClass/]
[/if]
[/let]
[/if]
[if (e.oclIsKindOf(MacOs))]
[if oclAsType(Docker).resourceClass.toString() = 'macos.x86.medium.gen2']
['macos.x86.medium.gen2*'/]
[/if]
[if oclAsType(Docker).resourceClass.toString() <> 'macos.x86.medium.gen2']
[oclAsType(Docker).resourceClass.toString()/]
[/if]
[/if]
[/template]

[template public generateDockerExecEnv(docker : Docker)]
- image: [docker.image/]
[if (docker.entrypoint->notEmpty())]
  entrypoint:
    [for (ep: String | docker.entrypoint)][ep/][/for]
[/if]
[if (docker.command->notEmpty())]
  command:
  [for (c: String | docker.command)]
    [c/]
  [/for]
[/if]
[if (docker.user->notEmpty())]
  user: [docker.user/]
[/if]
[if (docker.docker_auth->notEmpty())]
  auth:
  [for (d: Docker_Auth | docker.docker_auth)]
    username: [d.username/]
    password: [d.password/]
  [/for]
[/if]
[if (docker.docker_aws_auth->notEmpty())]
  aws_auth:
    aws_access_key_id: [docker_aws_auth.aws_access_key_id/]
    aws_secret_access_key: [docker_aws_auth.aws_secret_access_key/]
[/if]
[/template]


[template public generateMachineExecEnv(machine : Machine)]
image: [machine.image/]
[if (machine.docker_layer_caching = true)]
docker_layer_caching: [machine.docker_layer_caching/]
[/if]
[/template]


[template public generateMacExecEnv(mac : MacOs)]
xcode: [mac.xcode/]
[/template]


[template public generateJobs(aPipeline : Pipeline)]
[if (aPipeline.jobs->notEmpty()) ]
jobs:
[for (j: Job | aPipeline.jobs)]
  [generateJob(j)/]
[/for]
[/if]
[/template]


[template public generateJob(aJob : Job)]
[aJob.name/]:
[if (aJob.reuseExecutor->notEmpty())]
  executor: [aJob.reuseExecutor/]
[/if]
[if (aJob.executors->notEmpty())]
  [generateJobExecutors(aJob)/]
[/if]
[if (aJob.environments->notEmpty())]
  environment:
  [for (e: Environment | aJob.environments)]
    [generateEnvironment(e)/]
  [/for]
[/if]
  [generateParallelism(aJob)/]
[if (aJob.parameters->notEmpty())]
  parameters:
  [for (p: Parameter | aJob.parameters)]
    [generateParameters(p)/]
  [/for]
[/if]
  [generateSteps(aJob)/]
[/template]


[template public generateEnvironment(aEnv : Environment)]
[aEnv.key/]: [aEnv.value/]
[/template]


[template public generateJobExecutors(aJob : Job)]
[for (e: Executor | aJob.executors)]
[if (e.name->notEmpty())]
[e.name/]:
  [generateExec(e)/]
[/if]
[if (e.name->isEmpty())]
[generateExec(e)/]
[/if]
[/for]
[/template]


[template public generateParallelism(aJob : Job)]
[if (aJob.parallelism > 1) ]
parallelism: [aJob.parallelism/]
[/if]
[/template]


[template public generateJobParams(aJob : Job)]
[if (aJob.parameters->notEmpty())]
parameters: 
[for (p: Parameter | aJob.parameters)]
  [p.name/]:
    type: [p.type.toString().toLowerCase()/]
    [if (p.default->notEmpty())]
    default: [p.default/]
    [/if]
    [if (p.description->notEmpty())]
    description: [p.description/]
    [/if]
    [if (p.default->notEmpty())]
    default: [p.default/]
    [/if]
    [if (p.enumValues->notEmpty())]
    enum: ['['/][for (val: String | p.enumValues)][val/][if (not (p = p.enumValues->last()))], [/if][/for][']'/]
    [/if]
[/for]
[/if]
[/template]


[template public generateSteps(aJob: Job)]
steps:
[for (s: Step | aJob.steps)]
  [generateStep(s)/]
[/for]
[/template]

[template public generateStep(aStep: Step)]
[if (aStep.oclIsKindOf(When_Unless))]
[generateWhen_UnlessStep(oclAsType(When_Unless))/]
[/if]
[if (aStep.oclIsKindOf(Run))]
[generateRunStep(oclAsType(Run))/]
[/if]
[if (aStep.oclIsKindOf(SaveCache))]
[generateSaveCacheStep(oclAsType(SaveCache))/]
[/if]
[if (aStep.oclIsKindOf(AddSSHKeys))]
[generateAddSSHKeysStep(oclAsType(AddSSHKeys))/]
[/if]
[if (aStep.oclIsKindOf(Checkout))]
[generateCheckoutStep(oclAsType(Checkout))/]
[/if]
[if (aStep.oclIsKindOf(RestoreCache))]
[generateRestoreCacheStep(oclAsType(RestoreCache))/]
[/if]
[if (aStep.oclIsKindOf(SetupRemoteDocker))]
[generateSetupRemoteDockerStep(oclAsType(SetupRemoteDocker))/]
[/if]
[if (aStep.oclIsKindOf(StoreArtifact))]
[generateStoreArtifactStep(oclAsType(StoreArtifact))/]
[/if]
[if (aStep.oclIsKindOf(AttachWorkspace))]
[generateAttachWorkspaceStep(oclAsType(AttachWorkspace))/]
[/if]
[if (aStep.oclIsKindOf(PersistToWorkspace))]
[generatePersistToWorkspaceStep(oclAsType(PersistToWorkspace))/]
[/if]
[if (aStep.oclIsKindOf(StoreTestResults))]
[generateStoreTestResultsStep(oclAsType(StoreTestResults))/]
[/if]
[/template]

[template public generateWhen_UnlessStep(aWhen_Unless: When_Unless)]
- when:
    condition: [aWhen_Unless.condition/]
    steps:
    [for (s: Step | aWhen_Unless.when_step)]
      [generateStep(s)/]
    [/for]
[if (aWhen_Unless.unless_step->notEmpty())]
- unless:
    condition: [aWhen_Unless.condition/]
    steps:
    [for (s: Step | aWhen_Unless.unless_step)]
      [generateStep(s)/]
    [/for]
[/if]
[/template]

[template public generateRunStep(aRun: Run)]
- run:
  [if (aRun.name->notEmpty())]
    name: [aRun.name/]
  [/if]
    command: ['|'/]
    [for (c: RunCommand | aRun.run_commands)]
      [c.name/] [generateParameters(aRun)/]
    [/for]
  [if (aRun.when.toString() <> 'on_success')]
    when: [aRun.when.toString()/]
  [/if]
  [if (aRun.background = true)]
    background: true
  [/if]
  [if (aRun.working_directory->notEmpty())]
    working_directory: [aRun.working_directory/]
  [/if]
  [if (aRun.no_output_timeout <> '10m')]
    no_output_timeout: [aRun.no_output_timeout/]
  [/if]
  [if (aRun.shell->notEmpty())]
    shell: [aRun.shell/]
  [/if]
  [if (aRun.environments->notEmpty())]
    environment:
    [for (e: Environment | aRun.environments)]
      [generateEnvironment(e)/]
    [/for]
[/if]
[/template]

[template public generateSaveCacheStep(aSaveCache: SaveCache)]
- save_cache:
    paths: 
    [for (path: String | aSaveCache.paths)] 
      - [path/] 
    [/for]
    key: [aSaveCache.key/]
    [if (aSaveCache.name->notEmpty())]name: [aSaveCache.name/][/if]
    [if (aSaveCache.when.toString() <> 'on_success')]when: [aSaveCache.when.toString()/][/if]
[/template]

[template public generateAddSSHKeysStep(aAddSSHKeys: AddSSHKeys)]
- add_ssh_keys:
  [if (aAddSSHKeys.fingerprints->notEmpty())]
    fingerprints: 
    [for (f: String | fingerprints)] 
      - [f/]
    [/for]
  [/if]
[/template]

[template public generateCheckoutStep(aCheckout: Checkout)]
- checkout
[/template]

[template public generateRestoreCacheStep(aRestoreCache: RestoreCache)]
- restore_cache:
  [if (aRestoreCache.key->notEmpty())]
    key: [aRestoreCache.key/]
  [/if]
  [if (aRestoreCache.key->notEmpty())]
    keys: [aRestoreCache.keys/]
    [for (key: String | aRestoreCache.keys)] 
      - [key/] 
    [/for]
  [/if]
  [if (aRestoreCache.name->notEmpty())]
    name: [aRestoreCache.name/]
  [/if]
[/template]

[template public generateSetupRemoteDockerStep(aSetupRemoteDocker: SetupRemoteDocker)]
- setup_remote_docker:
    [if (aSetupRemoteDocker.docker_layer_caching->notEmpty())]docker_layer_caching: [aSetupRemoteDocker.docker_layer_caching/][/if]
    [if (aSetupRemoteDocker.version->notEmpty())]version: [aSetupRemoteDocker.version/][/if]
[/template]

[template public generateStoreArtifactStep(aStoreArtifact: StoreArtifact)]
- store_artifacts:
    path: [aStoreArtifact.path/]
    [if (aStoreArtifact.destination->notEmpty())]
    destination: [aStoreArtifact.destination/]
    [/if]
[/template]

[template public generateAttachWorkspaceStep(aAttachWorkspace: AttachWorkspace)]
- attach_workspace:
    at: [aAttachWorkspace.at/]
[/template]

[template public generatePersistToWorkspaceStep(aPersistToWorkspace: PersistToWorkspace)]
- persist_to_workspace:
    root: [aPersistToWorkspace.root/]
    paths: 
    [for (path: String | aPersistToWorkspace.paths)] 
      - [path/] 
    [/for]
[/template]

[template public generateStoreTestResultsStep(aStoreTestResults: StoreTestResults)]
- store_test_results:
    path: [aStoreTestResults.path/]
[/template]



[template public generateParameters(aRun: Run)]
[for (p: Parameters | aRun.parameters)][p.parameter/] [/for]
[/template]


[template public generateWorkflows(aPipeline : Pipeline)]
[if (aPipeline.workflows->notEmpty())]
workflows:
[for (workflow: Workflow | aPipeline.workflows)]
  version: [workflow.version/]
  [workflow.name/]:
    [generateTriggers(workflow)/]
    [generateWorkflowWhen(workflow)/]
    [generateWorkflowJobs(workflow)/]
[/for]
[/if]
[/template]


[template public generateTriggers(aWorkflow: Workflow)]
[if (aWorkflow.triggers->notEmpty() and aWorkflow.branches->notEmpty())]
[generateAuxTriggers(aWorkflow)/]
[generateFilters(aWorkflow)/]
[/if]
[if (aWorkflow.triggers->isEmpty() and aWorkflow.branches->notEmpty())]
[generateFilters(aWorkflow)/]
[/if]
[if (aWorkflow.triggers->notEmpty() and aWorkflow.branches->isEmpty())]
[generateAuxTriggers(aWorkflow)/]
[/if]
[/template]

[comment Auxiliary filters section/]
[template public generateFilters(aWorkflow: Workflow)]
filters:
  branches:
    only:
    [for (b: Branch | aWorkflow.branches->select(branch | branch.branch.toString() = 'only'))]
      - [b.name/]
    [/for]
    [if (aWorkflow.branches->exists(branch | branch.branch.toString() = 'ignore'))]
    ignore:
    [for (b: Branch | aWorkflow.branches->select(branch | branch.branch.toString() = 'ignore'))]
      - [b.name/]
    [/for]
    [/if]
[/template]

[comment Auxiliary triggers section/]
[template public generateAuxTriggers(aWorkflow: Workflow)]
triggers:
  - schedule:
      cron: "[aWorkflow.triggers.cron/]"
[/template]


[template public generateWorkflowWhen(aWorkflow: Workflow)]
[if (aWorkflow.when_unless->notEmpty())]
when: [aWorkflow.when_unless.condition/]
[if (aWorkflow.when_unless.unless_step->notEmpty())]
unless: [aWorkflow.when_unless.condition/]
[/if]
[/if]
[/template]


[template public generateWorkflowJobs(aWorkflow: Workflow)]
jobs:
[for (j: JobWorkflow | aWorkflow.jobworkflow)]
  [if (j.requires->notEmpty() or j.branches->notEmpty())]
  - [j.name/]:
  [/if]
  [if (j.requires->isEmpty() and j.branches->isEmpty())]
  - [j.name/]
  [/if]
    [if (j.approvalJob)]
      type: approval
    [/if]
      [generateJobRequires(j)/]
      [generateJobContexts(j)/]
      [generateJobFilters(j)/]
      [generateJobMatrix(j)/]
[/for]
[/template]


[template public generateJobRequires(aJob: JobWorkflow)]
[if (aJob.requires->notEmpty())]
requires:
[for (r: String | aJob.requires)]
  - [r/]
[/for]
[/if]
[/template]

[template public generateJobContexts(aJob: JobWorkflow)]
[if (aJob._context->notEmpty())]
context:
[for (r: String | aJob._context)]
  - [r/]
[/for]
[/if]
[/template]

[template public generateJobFilters(aJob: JobWorkflow)]
[if (aJob.branches->notEmpty())]
filters:
  branches:
    only:
    [for (b: Branch | aJob.branches->select(branch | branch.branch.toString() = 'only'))]
      - [b.name/]
    [/for]
    [if (aJob.branches->exists(branch | branch.branch.toString() = 'ignore'))]
    ignore:
    [for (b: Branch | aJob.branches->select(branch | branch.branch.toString() = 'ignore'))]
      - [b.name/]
    [/for]
    [/if]
[/if]
[/template]

[template public generateJobMatrix(aJob: JobWorkflow)]
[if (aJob.matrix->notEmpty())]
matrix:
  parameters:
  [for (m: MatrixParams | aJob.matrix.matrix_params)]
    [m.key/]: ['['/][for (val: String | m.values)][val/][if (not (val = m.values->last()))], [/if][/for][']'/]
  [/for]
[if (aJob.matrix.matrix_exclude->notEmpty())]
  exclude:
  [for (m: MatrixParams | aJob.matrix.matrix_exclude)]
    [if (m = aJob.matrix.matrix_exclude->first())]- [m.key/]: [m.values/][/if][if not((m = aJob.matrix.matrix_exclude->first()))]  [m.key/]: [m.values/][/if]
  [/for]
[/if]
[/if]
[/template]
