/**
 * generated by Xtext 2.34.0
 */
package org.xtext.example.cicd.formatting2;

import cICD_metamodel.Agent;
import cICD_metamodel.Artifact;
import cICD_metamodel.Environment;
import cICD_metamodel.IfStep;
import cICD_metamodel.Input;
import cICD_metamodel.Job;
import cICD_metamodel.Matrix;
import cICD_metamodel.Output;
import cICD_metamodel.Pipeline;
import cICD_metamodel.ScheduleTrigger;
import cICD_metamodel.Step;
import com.google.inject.Inject;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;
import org.xtext.example.cicd.services.CICDGrammarAccess;

@SuppressWarnings("all")
public class CICDFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private CICDGrammarAccess _cICDGrammarAccess;

  protected void _format(final Pipeline pipeline, @Extension final IFormattableDocument document) {
    EList<Job> _jobs = pipeline.getJobs();
    for (final Job job : _jobs) {
      document.<Job>format(job);
    }
    EList<Environment> _pipeline_environment = pipeline.getPipeline_environment();
    for (final Environment environment : _pipeline_environment) {
      document.<Environment>format(environment);
    }
    EList<ScheduleTrigger> _triggers = pipeline.getTriggers();
    for (final ScheduleTrigger scheduleTrigger : _triggers) {
      document.<ScheduleTrigger>format(scheduleTrigger);
    }
    EList<Agent> _agents = pipeline.getAgents();
    for (final Agent agent : _agents) {
      document.<Agent>format(agent);
    }
    EList<Input> _inputs = pipeline.getInputs();
    for (final Input input : _inputs) {
      document.<Input>format(input);
    }
    EList<Output> _output = pipeline.getOutput();
    for (final Output output : _output) {
      document.<Output>format(output);
    }
  }

  protected void _format(final Job job, @Extension final IFormattableDocument document) {
    EList<Step> _steps = job.getSteps();
    for (final Step step : _steps) {
      document.<Step>format(step);
    }
    EList<IfStep> _ifStep = job.getIfStep();
    for (final IfStep ifStep : _ifStep) {
      document.<IfStep>format(ifStep);
    }
    EList<Artifact> _artifacts = job.getArtifacts();
    for (final Artifact artifact : _artifacts) {
      document.<Artifact>format(artifact);
    }
    EList<Environment> _environments = job.getEnvironments();
    for (final Environment environment : _environments) {
      document.<Environment>format(environment);
    }
    EList<Job> _jobs = job.getJobs();
    for (final Job _job : _jobs) {
      document.<Job>format(_job);
    }
    document.<Matrix>format(job.getMatrix());
    EList<Agent> _agents = job.getAgents();
    for (final Agent agent : _agents) {
      document.<Agent>format(agent);
    }
    EList<Output> _output = job.getOutput();
    for (final Output output : _output) {
      document.<Output>format(output);
    }
  }

  public void format(final Object job, final IFormattableDocument document) {
    if (job instanceof XtextResource) {
      _format((XtextResource)job, document);
      return;
    } else if (job instanceof Job) {
      _format((Job)job, document);
      return;
    } else if (job instanceof Pipeline) {
      _format((Pipeline)job, document);
      return;
    } else if (job instanceof EObject) {
      _format((EObject)job, document);
      return;
    } else if (job == null) {
      _format((Void)null, document);
      return;
    } else if (job != null) {
      _format(job, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(job, document).toString());
    }
  }
}
