/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.cicd.formatting2

import cICD_metamodel.Job
import cICD_metamodel.Pipeline
import com.google.inject.Inject
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.xtext.example.cicd.services.CICDGrammarAccess

class CICDFormatter extends AbstractFormatter2 {
	
	@Inject extension CICDGrammarAccess

	def dispatch void format(Pipeline pipeline, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (job : pipeline.jobs) {
			job.format
		}
		for (environment : pipeline.pipeline_environment) {
			environment.format
		}
		for (scheduleTrigger : pipeline.triggers) {
			scheduleTrigger.format
		}
		for (agent : pipeline.agents) {
			agent.format
		}
		for (input : pipeline.inputs) {
			input.format
		}
		for (output : pipeline.output) {
			output.format
		}
	}

	def dispatch void format(Job job, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (step : job.steps) {
			step.format
		}
		for (ifStep : job.ifStep) {
			ifStep.format
		}
		for (artifact : job.artifacts) {
			artifact.format
		}
		for (environment : job.environments) {
			environment.format
		}
		for (_job : job.jobs) {
			_job.format
		}
		job.matrix.format
		for (agent : job.agents) {
			agent.format
		}
		for (output : job.output) {
			output.format
		}
	}
	
	// TODO: implement for Agent, Step, IfStep, Matrix, DockerContainer
}
