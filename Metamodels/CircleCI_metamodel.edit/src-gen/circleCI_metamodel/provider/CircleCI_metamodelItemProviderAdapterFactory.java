/**
 */
package circleCI_metamodel.provider;

import circleCI_metamodel.util.CircleCI_metamodelAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class CircleCI_metamodelItemProviderAdapterFactory extends CircleCI_metamodelAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public CircleCI_metamodelItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.Run} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RunItemProvider runItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.Run}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRunAdapter() {
		if (runItemProvider == null) {
			runItemProvider = new RunItemProvider(this);
		}

		return runItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.Docker_Auth} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Docker_AuthItemProvider docker_AuthItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.Docker_Auth}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocker_AuthAdapter() {
		if (docker_AuthItemProvider == null) {
			docker_AuthItemProvider = new Docker_AuthItemProvider(this);
		}

		return docker_AuthItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.RestoreCache} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RestoreCacheItemProvider restoreCacheItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.RestoreCache}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRestoreCacheAdapter() {
		if (restoreCacheItemProvider == null) {
			restoreCacheItemProvider = new RestoreCacheItemProvider(this);
		}

		return restoreCacheItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.Docker_Aws_Auths} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Docker_Aws_AuthsItemProvider docker_Aws_AuthsItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.Docker_Aws_Auths}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocker_Aws_AuthsAdapter() {
		if (docker_Aws_AuthsItemProvider == null) {
			docker_Aws_AuthsItemProvider = new Docker_Aws_AuthsItemProvider(this);
		}

		return docker_Aws_AuthsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.Job} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JobItemProvider jobItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.Job}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJobAdapter() {
		if (jobItemProvider == null) {
			jobItemProvider = new JobItemProvider(this);
		}

		return jobItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.Machine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MachineItemProvider machineItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.Machine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMachineAdapter() {
		if (machineItemProvider == null) {
			machineItemProvider = new MachineItemProvider(this);
		}

		return machineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.PersistToWorkspace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersistToWorkspaceItemProvider persistToWorkspaceItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.PersistToWorkspace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersistToWorkspaceAdapter() {
		if (persistToWorkspaceItemProvider == null) {
			persistToWorkspaceItemProvider = new PersistToWorkspaceItemProvider(this);
		}

		return persistToWorkspaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.StoreArtifact} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoreArtifactItemProvider storeArtifactItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.StoreArtifact}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoreArtifactAdapter() {
		if (storeArtifactItemProvider == null) {
			storeArtifactItemProvider = new StoreArtifactItemProvider(this);
		}

		return storeArtifactItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.StoreTestResults} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StoreTestResultsItemProvider storeTestResultsItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.StoreTestResults}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStoreTestResultsAdapter() {
		if (storeTestResultsItemProvider == null) {
			storeTestResultsItemProvider = new StoreTestResultsItemProvider(this);
		}

		return storeTestResultsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.SetupRemoteDocker} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SetupRemoteDockerItemProvider setupRemoteDockerItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.SetupRemoteDocker}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSetupRemoteDockerAdapter() {
		if (setupRemoteDockerItemProvider == null) {
			setupRemoteDockerItemProvider = new SetupRemoteDockerItemProvider(this);
		}

		return setupRemoteDockerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.Parameters} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParametersItemProvider parametersItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.Parameters}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParametersAdapter() {
		if (parametersItemProvider == null) {
			parametersItemProvider = new ParametersItemProvider(this);
		}

		return parametersItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.Parameter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ParameterItemProvider parameterItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.Parameter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createParameterAdapter() {
		if (parameterItemProvider == null) {
			parameterItemProvider = new ParameterItemProvider(this);
		}

		return parameterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.MacOs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MacOsItemProvider macOsItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.MacOs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMacOsAdapter() {
		if (macOsItemProvider == null) {
			macOsItemProvider = new MacOsItemProvider(this);
		}

		return macOsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.Workflow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WorkflowItemProvider workflowItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.Workflow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWorkflowAdapter() {
		if (workflowItemProvider == null) {
			workflowItemProvider = new WorkflowItemProvider(this);
		}

		return workflowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.Environment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EnvironmentItemProvider environmentItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.Environment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEnvironmentAdapter() {
		if (environmentItemProvider == null) {
			environmentItemProvider = new EnvironmentItemProvider(this);
		}

		return environmentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.Docker} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DockerItemProvider dockerItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.Docker}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDockerAdapter() {
		if (dockerItemProvider == null) {
			dockerItemProvider = new DockerItemProvider(this);
		}

		return dockerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.AddSSHKeys} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AddSSHKeysItemProvider addSSHKeysItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.AddSSHKeys}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAddSSHKeysAdapter() {
		if (addSSHKeysItemProvider == null) {
			addSSHKeysItemProvider = new AddSSHKeysItemProvider(this);
		}

		return addSSHKeysItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.SaveCache} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SaveCacheItemProvider saveCacheItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.SaveCache}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSaveCacheAdapter() {
		if (saveCacheItemProvider == null) {
			saveCacheItemProvider = new SaveCacheItemProvider(this);
		}

		return saveCacheItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.AttachWorkspace} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttachWorkspaceItemProvider attachWorkspaceItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.AttachWorkspace}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttachWorkspaceAdapter() {
		if (attachWorkspaceItemProvider == null) {
			attachWorkspaceItemProvider = new AttachWorkspaceItemProvider(this);
		}

		return attachWorkspaceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.When_Unless} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected When_UnlessItemProvider when_UnlessItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.When_Unless}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWhen_UnlessAdapter() {
		if (when_UnlessItemProvider == null) {
			when_UnlessItemProvider = new When_UnlessItemProvider(this);
		}

		return when_UnlessItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.Branch} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BranchItemProvider branchItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.Branch}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBranchAdapter() {
		if (branchItemProvider == null) {
			branchItemProvider = new BranchItemProvider(this);
		}

		return branchItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.RunCommand} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RunCommandItemProvider runCommandItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.RunCommand}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRunCommandAdapter() {
		if (runCommandItemProvider == null) {
			runCommandItemProvider = new RunCommandItemProvider(this);
		}

		return runCommandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.Trigger} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriggerItemProvider triggerItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.Trigger}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriggerAdapter() {
		if (triggerItemProvider == null) {
			triggerItemProvider = new TriggerItemProvider(this);
		}

		return triggerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.Checkout} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CheckoutItemProvider checkoutItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.Checkout}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCheckoutAdapter() {
		if (checkoutItemProvider == null) {
			checkoutItemProvider = new CheckoutItemProvider(this);
		}

		return checkoutItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.Pipeline} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PipelineItemProvider pipelineItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.Pipeline}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPipelineAdapter() {
		if (pipelineItemProvider == null) {
			pipelineItemProvider = new PipelineItemProvider(this);
		}

		return pipelineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.Orb} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OrbItemProvider orbItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.Orb}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOrbAdapter() {
		if (orbItemProvider == null) {
			orbItemProvider = new OrbItemProvider(this);
		}

		return orbItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.Command} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommandItemProvider commandItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.Command}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommandAdapter() {
		if (commandItemProvider == null) {
			commandItemProvider = new CommandItemProvider(this);
		}

		return commandItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.Matrix} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatrixItemProvider matrixItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.Matrix}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatrixAdapter() {
		if (matrixItemProvider == null) {
			matrixItemProvider = new MatrixItemProvider(this);
		}

		return matrixItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.JobWorkflow} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JobWorkflowItemProvider jobWorkflowItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.JobWorkflow}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJobWorkflowAdapter() {
		if (jobWorkflowItemProvider == null) {
			jobWorkflowItemProvider = new JobWorkflowItemProvider(this);
		}

		return jobWorkflowItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link circleCI_metamodel.MatrixParams} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MatrixParamsItemProvider matrixParamsItemProvider;

	/**
	 * This creates an adapter for a {@link circleCI_metamodel.MatrixParams}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMatrixParamsAdapter() {
		if (matrixParamsItemProvider == null) {
			matrixParamsItemProvider = new MatrixParamsItemProvider(this);
		}

		return matrixParamsItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void dispose() {
		if (runItemProvider != null)
			runItemProvider.dispose();
		if (docker_AuthItemProvider != null)
			docker_AuthItemProvider.dispose();
		if (restoreCacheItemProvider != null)
			restoreCacheItemProvider.dispose();
		if (docker_Aws_AuthsItemProvider != null)
			docker_Aws_AuthsItemProvider.dispose();
		if (jobItemProvider != null)
			jobItemProvider.dispose();
		if (machineItemProvider != null)
			machineItemProvider.dispose();
		if (persistToWorkspaceItemProvider != null)
			persistToWorkspaceItemProvider.dispose();
		if (storeArtifactItemProvider != null)
			storeArtifactItemProvider.dispose();
		if (storeTestResultsItemProvider != null)
			storeTestResultsItemProvider.dispose();
		if (setupRemoteDockerItemProvider != null)
			setupRemoteDockerItemProvider.dispose();
		if (parametersItemProvider != null)
			parametersItemProvider.dispose();
		if (parameterItemProvider != null)
			parameterItemProvider.dispose();
		if (macOsItemProvider != null)
			macOsItemProvider.dispose();
		if (workflowItemProvider != null)
			workflowItemProvider.dispose();
		if (environmentItemProvider != null)
			environmentItemProvider.dispose();
		if (dockerItemProvider != null)
			dockerItemProvider.dispose();
		if (addSSHKeysItemProvider != null)
			addSSHKeysItemProvider.dispose();
		if (saveCacheItemProvider != null)
			saveCacheItemProvider.dispose();
		if (attachWorkspaceItemProvider != null)
			attachWorkspaceItemProvider.dispose();
		if (when_UnlessItemProvider != null)
			when_UnlessItemProvider.dispose();
		if (branchItemProvider != null)
			branchItemProvider.dispose();
		if (runCommandItemProvider != null)
			runCommandItemProvider.dispose();
		if (triggerItemProvider != null)
			triggerItemProvider.dispose();
		if (checkoutItemProvider != null)
			checkoutItemProvider.dispose();
		if (pipelineItemProvider != null)
			pipelineItemProvider.dispose();
		if (orbItemProvider != null)
			orbItemProvider.dispose();
		if (commandItemProvider != null)
			commandItemProvider.dispose();
		if (matrixItemProvider != null)
			matrixItemProvider.dispose();
		if (jobWorkflowItemProvider != null)
			jobWorkflowItemProvider.dispose();
		if (matrixParamsItemProvider != null)
			matrixParamsItemProvider.dispose();
	}

}
