/**
 */
package org.gemoc.agro.exploitation.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.gemoc.agro.exploitation.Ewe;
import org.gemoc.agro.exploitation.ExploitationPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Ewe</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.gemoc.agro.exploitation.impl.EweImpl#getHerdSize <em>Herd Size</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class EweImpl extends WorkGroupImpl implements Ewe {
	/**
	 * The default value of the '{@link #getHerdSize() <em>Herd Size</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getHerdSize()
	 * @generated
	 * @ordered
	 */
	protected static final int HERD_SIZE_EDEFAULT = 0;

	/**
	 * The cached value of the '{@link #getHerdSize() <em>Herd Size</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getHerdSize()
	 * @generated
	 * @ordered
	 */
	protected int herdSize = HERD_SIZE_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EweImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return ExploitationPackage.Literals.EWE;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getHerdSize() {
		return herdSize;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setHerdSize(int newHerdSize) {
		int oldHerdSize = herdSize;
		herdSize = newHerdSize;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ExploitationPackage.EWE__HERD_SIZE, oldHerdSize, herdSize));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case ExploitationPackage.EWE__HERD_SIZE:
				return getHerdSize();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case ExploitationPackage.EWE__HERD_SIZE:
				setHerdSize((Integer)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case ExploitationPackage.EWE__HERD_SIZE:
				setHerdSize(HERD_SIZE_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case ExploitationPackage.EWE__HERD_SIZE:
				return herdSize != HERD_SIZE_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (herdSize: ");
		result.append(herdSize);
		result.append(')');
		return result.toString();
	}

} //EweImpl
