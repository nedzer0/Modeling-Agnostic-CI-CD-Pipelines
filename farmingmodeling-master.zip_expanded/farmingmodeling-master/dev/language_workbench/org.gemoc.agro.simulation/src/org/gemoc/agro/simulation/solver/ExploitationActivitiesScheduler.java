package org.gemoc.agro.simulation.solver;

import java.io.IOException;
import java.util.Collections;
import java.util.Iterator;

import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl;
import org.gemoc.agro.ActivitiesDSLStandaloneSetup;
import org.gemoc.agro.activitiesDSL.ActivitiesDSLPackage;
import org.gemoc.agro.activitiesDSL.ActivityResource;
import org.gemoc.agro.activitiesDSL.Culture;
import org.gemoc.agro.activitiesDSL.Date;
import org.gemoc.agro.activitiesDSL.ExploitationActivity;
import org.gemoc.agro.activitiesDSL.Frequency;
import org.gemoc.agro.exploitation.Surface;
import org.gemoc.agro.simulation.ActivityWork;
import org.gemoc.agro.simulation.ClimateData;
import org.gemoc.agro.simulation.Day;
import org.gemoc.agro.simulation.ResourceAllocation;
import org.gemoc.agro.simulation.Schedule;
import org.gemoc.agro.simulation.SchedulingFeedback;
import org.gemoc.agro.simulation.SimulationFactory;
import org.gemoc.agro.simulation.SimulationPackage;
import org.gemoc.agro.simulation.resource.ClimateDataResourceFactoryImpl;
import org.optaplanner.core.api.solver.Solver;
import org.optaplanner.core.api.solver.SolverFactory;

import com.google.common.collect.Iterables;
import com.google.common.collect.Iterators;

public class ExploitationActivitiesScheduler {

  public void createSchedule(Schedule s) {
    AgroScoreCalculator.nbSolutions = 0;
    createWorkToDo(s);
    createResourceAllocations(s);

    // SolverConfig conf = configureSolver(s);
    // Solver solver = conf.buildSolver();
    // //
    SolverFactory solverFactory = SolverFactory
        .createFromXmlResource("org/gemoc/agro/simulation/solver/config.xml");

    solverFactory.getSolverConfig().getTerminationConfig()
        .setSecondsSpentLimit(new Long(s.getSolverSearchSecondsSpentLimit()));
    Solver solver = solverFactory.buildSolver();

    SimulationSolution unsolvedCloudBalance = new SimulationSolution(s);

    // Solve the problem
    solver.solve(unsolvedCloudBalance);
    SimulationSolution solvedCloudBalance = (SimulationSolution) solver
        .getBestSolution();
    s.getWorkToDo().clear();
    s.getWorkToDo().addAll(solvedCloudBalance.getSimulation().getWorkToDo());
    s.getAllocations().clear();
    s.getAllocations().addAll(
        solvedCloudBalance.getSimulation().getAllocations());

    s.setHardScore(solvedCloudBalance.getSimulation().getHardScore());
    s.setSoftScore(solvedCloudBalance.getSimulation().getSoftScore());
    s.setSolutions(AgroScoreCalculator.nbSolutions);
    new AgroScoreCalculator().calculateScore(unsolvedCloudBalance);

  }

  private void createResourceAllocations(Schedule s) {
    s.getAllocations().clear();
    for (ActivityWork w : s.getWorkToDo()) {
      if (w.getActivity() != null) {
        for (ActivityResource use : w.getActivity().getUses()) {
          if (use.getResourceKind() != null) {
            for (int i = 0; i < use.getQuantity(); i++) {
              ResourceAllocation res = SimulationFactory.eINSTANCE
                  .createResourceAllocation();
              res.setKind(use.getResourceKind());
              res.setWork(w);
              s.getAllocations().add(res);
            }

          }
        }
      }

    }

  }

  public static void main(String[] args) {

    ResourceSet set = new ResourceSetImpl();

    set.getPackageRegistry().put(SimulationPackage.eINSTANCE.getNsURI(),
        SimulationPackage.eINSTANCE);
    set.getPackageRegistry().put(ActivitiesDSLPackage.eINSTANCE.getNsURI(),
        ActivitiesDSLPackage.eINSTANCE);
    set.getResourceFactoryRegistry().getExtensionToFactoryMap()
        .put("simulation", new XMIResourceFactoryImpl());
    set.getResourceFactoryRegistry().getExtensionToFactoryMap()
        .put("exploitation", new XMIResourceFactoryImpl());
    set.getResourceFactoryRegistry().getExtensionToFactoryMap()
        .put("csv", new ClimateDataResourceFactoryImpl());

    new ActivitiesDSLStandaloneSetup().createInjectorAndDoEMFRegistration();

    Resource loaded = set
        .getResource(
            URI.createFileURI("/home/cedric/src/farmingmodeling/dev/modeling_workbench/MyExploitation/schedule.simulation"),
            true);
    EcoreUtil.resolveAll(loaded);
    for (Schedule s : Iterables.filter(loaded.getContents(), Schedule.class)) {
      new ExploitationActivitiesScheduler().createSchedule(s);
      Iterator<SchedulingFeedback> it = Iterators.filter(s.eAllContents(),
          SchedulingFeedback.class);
      while (it.hasNext()) {
        SchedulingFeedback feedback = it.next();
        System.out.println(feedback.getLevel() + " : " + feedback.getMessage());
      }
      serialize(s);

    }
    System.out.println("ExploitationActivitiesScheduler.main()");
  }

  private static void serialize(Schedule s) {
    XMIResourceImpl res = new XMIResourceImpl();
    res.getContents().add(EcoreUtil.copy(s));
    try {
      res.save(System.out, Collections.EMPTY_MAP);
    } catch (IOException e) {
      // TODO Auto-generated catch block
      e.printStackTrace();
    }
  }

  public void createWorkToDo(Schedule sim) {
    sim.getWorkToDo().clear();
    /*
     * for each surface x culture we declare the corresponding activities
     */
    if (sim.getExploitation() != null) {
      for (Surface s : sim.getExploitation().getSurfaces()) {
        if (s.getDedicatedto() != null) {
          for (Culture c : s.getDedicatedto().getCultures()) {
            for (ExploitationActivity activity : c.getActivities()) {
              if (activity.getFrequency() == Frequency.WEEKLY) {
                Date startDate = activity.getStartDate();
                Date endDate = activity.getEndDate();
                if (startDate != null && endDate != null) {
                  int nbDaysInBetween = AgroScoreCalculator
                      .numberOfDayInYear(endDate)
                      - AgroScoreCalculator.numberOfDayInYear(startDate);
                  for (int i = 0; i < nbDaysInBetween / 7; i++) {
                    addWorkTodo(sim, s, activity, i);
                  }
                }

              } else {
                addWorkTodo(sim, s, activity, 0);
              }
            }

          }
        }
      }
    }
  }

  private void addWorkTodo(Schedule sim, Surface s,
      ExploitationActivity activity, int shift) {
    ActivityWork work = SimulationFactory.eINSTANCE.createActivityWork();
    work.setActivity(activity);
    if (activity.getStartDate() != null) {
      Date startDate = activity.getStartDate();
      Day correspondingDay = getCorrespondingDay(sim.getClimateData(),
          startDate, shift);
      if (correspondingDay != null) {
        work.setScheduledOn(correspondingDay);
      }
    }
    work.setOnSurface(s);
    sim.getWorkToDo().add(work);
  }

  private Day getCorrespondingDay(ClimateData climateData, Date startDate,
      int shift) {
    Iterator<Day> it = climateData.getDays().iterator();
    Day result = null;
    while (result == null && it.hasNext()) {
      Day day = it.next();
      if (startDate.getMonth() == day.getMonth()
          && startDate.getDay() == day.getDay()) {
        result = day;
        for (int i = 0; i < shift; i++) {
          if (it.hasNext()) {
            result = it.next();
          }
        }

      }
    }
    return result;
  }

}
