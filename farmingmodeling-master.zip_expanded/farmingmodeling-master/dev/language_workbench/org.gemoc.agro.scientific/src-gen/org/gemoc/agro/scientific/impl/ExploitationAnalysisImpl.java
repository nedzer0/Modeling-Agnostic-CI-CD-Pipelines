/**
 */
package org.gemoc.agro.scientific.impl;

import java.util.Collection;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;
import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;
import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;
import org.gemoc.agro.scientific.BiomassModel;
import org.gemoc.agro.scientific.ExploitationAnalysis;
import org.gemoc.agro.scientific.ScientificPackage;
import org.gemoc.agro.scientific.SurfaceData;
import org.gemoc.agro.simulation.Schedule;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Exploitation Analysis</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link org.gemoc.agro.scientific.impl.ExploitationAnalysisImpl#getBiomassModels <em>Biomass Models</em>}</li>
 *   <li>{@link org.gemoc.agro.scientific.impl.ExploitationAnalysisImpl#getSurfaceDatas <em>Surface Datas</em>}</li>
 *   <li>{@link org.gemoc.agro.scientific.impl.ExploitationAnalysisImpl#getSchedule <em>Schedule</em>}</li>
 *   <li>{@link org.gemoc.agro.scientific.impl.ExploitationAnalysisImpl#getLimitBeforeWatering <em>Limit Before Watering</em>}</li>
 *   <li>{@link org.gemoc.agro.scientific.impl.ExploitationAnalysisImpl#getWateringQuantity <em>Watering Quantity</em>}</li>
 *   <li>{@link org.gemoc.agro.scientific.impl.ExploitationAnalysisImpl#getKDaysToConsider <em>KDays To Consider</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class ExploitationAnalysisImpl extends MinimalEObjectImpl.Container implements ExploitationAnalysis {
	/**
	 * The cached value of the '{@link #getBiomassModels() <em>Biomass Models</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getBiomassModels()
	 * @generated
	 * @ordered
	 */
	protected EList<BiomassModel> biomassModels;

	/**
	 * The cached value of the '{@link #getSurfaceDatas() <em>Surface Datas</em>}' containment reference list.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSurfaceDatas()
	 * @generated
	 * @ordered
	 */
	protected EList<SurfaceData> surfaceDatas;

	/**
	 * The cached value of the '{@link #getSchedule() <em>Schedule</em>}' reference.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getSchedule()
	 * @generated
	 * @ordered
	 */
	protected Schedule schedule;

	/**
	 * The default value of the '{@link #getLimitBeforeWatering() <em>Limit Before Watering</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getLimitBeforeWatering()
	 * @generated
	 * @ordered
	 */
	protected static final double LIMIT_BEFORE_WATERING_EDEFAULT = -60.0;

	/**
	 * The cached value of the '{@link #getLimitBeforeWatering() <em>Limit Before Watering</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getLimitBeforeWatering()
	 * @generated
	 * @ordered
	 */
	protected double limitBeforeWatering = LIMIT_BEFORE_WATERING_EDEFAULT;

	/**
	 * The default value of the '{@link #getWateringQuantity() <em>Watering Quantity</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getWateringQuantity()
	 * @generated
	 * @ordered
	 */
	protected static final double WATERING_QUANTITY_EDEFAULT = 40.0;

	/**
	 * The cached value of the '{@link #getWateringQuantity() <em>Watering Quantity</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getWateringQuantity()
	 * @generated
	 * @ordered
	 */
	protected double wateringQuantity = WATERING_QUANTITY_EDEFAULT;

	/**
	 * The default value of the '{@link #getKDaysToConsider() <em>KDays To Consider</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getKDaysToConsider()
	 * @generated
	 * @ordered
	 */
	protected static final int KDAYS_TO_CONSIDER_EDEFAULT = 15;

	/**
	 * The cached value of the '{@link #getKDaysToConsider() <em>KDays To Consider</em>}' attribute.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @see #getKDaysToConsider()
	 * @generated
	 * @ordered
	 */
	protected int kDaysToConsider = KDAYS_TO_CONSIDER_EDEFAULT;

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExploitationAnalysisImpl() {
		super();
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected EClass eStaticClass() {
		return ScientificPackage.Literals.EXPLOITATION_ANALYSIS;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<BiomassModel> getBiomassModels() {
		if (biomassModels == null) {
			biomassModels = new EObjectContainmentEList<BiomassModel>(BiomassModel.class, this, ScientificPackage.EXPLOITATION_ANALYSIS__BIOMASS_MODELS);
		}
		return biomassModels;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public EList<SurfaceData> getSurfaceDatas() {
		if (surfaceDatas == null) {
			surfaceDatas = new EObjectContainmentEList<SurfaceData>(SurfaceData.class, this, ScientificPackage.EXPLOITATION_ANALYSIS__SURFACE_DATAS);
		}
		return surfaceDatas;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Schedule getSchedule() {
		if (schedule != null && schedule.eIsProxy()) {
			InternalEObject oldSchedule = (InternalEObject)schedule;
			schedule = (Schedule)eResolveProxy(oldSchedule);
			if (schedule != oldSchedule) {
				if (eNotificationRequired())
					eNotify(new ENotificationImpl(this, Notification.RESOLVE, ScientificPackage.EXPLOITATION_ANALYSIS__SCHEDULE, oldSchedule, schedule));
			}
		}
		return schedule;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public Schedule basicGetSchedule() {
		return schedule;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setSchedule(Schedule newSchedule) {
		Schedule oldSchedule = schedule;
		schedule = newSchedule;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ScientificPackage.EXPLOITATION_ANALYSIS__SCHEDULE, oldSchedule, schedule));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getLimitBeforeWatering() {
		return limitBeforeWatering;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setLimitBeforeWatering(double newLimitBeforeWatering) {
		double oldLimitBeforeWatering = limitBeforeWatering;
		limitBeforeWatering = newLimitBeforeWatering;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ScientificPackage.EXPLOITATION_ANALYSIS__LIMIT_BEFORE_WATERING, oldLimitBeforeWatering, limitBeforeWatering));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public double getWateringQuantity() {
		return wateringQuantity;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setWateringQuantity(double newWateringQuantity) {
		double oldWateringQuantity = wateringQuantity;
		wateringQuantity = newWateringQuantity;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ScientificPackage.EXPLOITATION_ANALYSIS__WATERING_QUANTITY, oldWateringQuantity, wateringQuantity));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public int getKDaysToConsider() {
		return kDaysToConsider;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setKDaysToConsider(int newKDaysToConsider) {
		int oldKDaysToConsider = kDaysToConsider;
		kDaysToConsider = newKDaysToConsider;
		if (eNotificationRequired())
			eNotify(new ENotificationImpl(this, Notification.SET, ScientificPackage.EXPLOITATION_ANALYSIS__KDAYS_TO_CONSIDER, oldKDaysToConsider, kDaysToConsider));
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs) {
		switch (featureID) {
			case ScientificPackage.EXPLOITATION_ANALYSIS__BIOMASS_MODELS:
				return ((InternalEList<?>)getBiomassModels()).basicRemove(otherEnd, msgs);
			case ScientificPackage.EXPLOITATION_ANALYSIS__SURFACE_DATAS:
				return ((InternalEList<?>)getSurfaceDatas()).basicRemove(otherEnd, msgs);
		}
		return super.eInverseRemove(otherEnd, featureID, msgs);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object eGet(int featureID, boolean resolve, boolean coreType) {
		switch (featureID) {
			case ScientificPackage.EXPLOITATION_ANALYSIS__BIOMASS_MODELS:
				return getBiomassModels();
			case ScientificPackage.EXPLOITATION_ANALYSIS__SURFACE_DATAS:
				return getSurfaceDatas();
			case ScientificPackage.EXPLOITATION_ANALYSIS__SCHEDULE:
				if (resolve) return getSchedule();
				return basicGetSchedule();
			case ScientificPackage.EXPLOITATION_ANALYSIS__LIMIT_BEFORE_WATERING:
				return getLimitBeforeWatering();
			case ScientificPackage.EXPLOITATION_ANALYSIS__WATERING_QUANTITY:
				return getWateringQuantity();
			case ScientificPackage.EXPLOITATION_ANALYSIS__KDAYS_TO_CONSIDER:
				return getKDaysToConsider();
		}
		return super.eGet(featureID, resolve, coreType);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@SuppressWarnings("unchecked")
	@Override
	public void eSet(int featureID, Object newValue) {
		switch (featureID) {
			case ScientificPackage.EXPLOITATION_ANALYSIS__BIOMASS_MODELS:
				getBiomassModels().clear();
				getBiomassModels().addAll((Collection<? extends BiomassModel>)newValue);
				return;
			case ScientificPackage.EXPLOITATION_ANALYSIS__SURFACE_DATAS:
				getSurfaceDatas().clear();
				getSurfaceDatas().addAll((Collection<? extends SurfaceData>)newValue);
				return;
			case ScientificPackage.EXPLOITATION_ANALYSIS__SCHEDULE:
				setSchedule((Schedule)newValue);
				return;
			case ScientificPackage.EXPLOITATION_ANALYSIS__LIMIT_BEFORE_WATERING:
				setLimitBeforeWatering((Double)newValue);
				return;
			case ScientificPackage.EXPLOITATION_ANALYSIS__WATERING_QUANTITY:
				setWateringQuantity((Double)newValue);
				return;
			case ScientificPackage.EXPLOITATION_ANALYSIS__KDAYS_TO_CONSIDER:
				setKDaysToConsider((Integer)newValue);
				return;
		}
		super.eSet(featureID, newValue);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public void eUnset(int featureID) {
		switch (featureID) {
			case ScientificPackage.EXPLOITATION_ANALYSIS__BIOMASS_MODELS:
				getBiomassModels().clear();
				return;
			case ScientificPackage.EXPLOITATION_ANALYSIS__SURFACE_DATAS:
				getSurfaceDatas().clear();
				return;
			case ScientificPackage.EXPLOITATION_ANALYSIS__SCHEDULE:
				setSchedule((Schedule)null);
				return;
			case ScientificPackage.EXPLOITATION_ANALYSIS__LIMIT_BEFORE_WATERING:
				setLimitBeforeWatering(LIMIT_BEFORE_WATERING_EDEFAULT);
				return;
			case ScientificPackage.EXPLOITATION_ANALYSIS__WATERING_QUANTITY:
				setWateringQuantity(WATERING_QUANTITY_EDEFAULT);
				return;
			case ScientificPackage.EXPLOITATION_ANALYSIS__KDAYS_TO_CONSIDER:
				setKDaysToConsider(KDAYS_TO_CONSIDER_EDEFAULT);
				return;
		}
		super.eUnset(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean eIsSet(int featureID) {
		switch (featureID) {
			case ScientificPackage.EXPLOITATION_ANALYSIS__BIOMASS_MODELS:
				return biomassModels != null && !biomassModels.isEmpty();
			case ScientificPackage.EXPLOITATION_ANALYSIS__SURFACE_DATAS:
				return surfaceDatas != null && !surfaceDatas.isEmpty();
			case ScientificPackage.EXPLOITATION_ANALYSIS__SCHEDULE:
				return schedule != null;
			case ScientificPackage.EXPLOITATION_ANALYSIS__LIMIT_BEFORE_WATERING:
				return limitBeforeWatering != LIMIT_BEFORE_WATERING_EDEFAULT;
			case ScientificPackage.EXPLOITATION_ANALYSIS__WATERING_QUANTITY:
				return wateringQuantity != WATERING_QUANTITY_EDEFAULT;
			case ScientificPackage.EXPLOITATION_ANALYSIS__KDAYS_TO_CONSIDER:
				return kDaysToConsider != KDAYS_TO_CONSIDER_EDEFAULT;
		}
		return super.eIsSet(featureID);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public String toString() {
		if (eIsProxy()) return super.toString();

		StringBuffer result = new StringBuffer(super.toString());
		result.append(" (limitBeforeWatering: ");
		result.append(limitBeforeWatering);
		result.append(", wateringQuantity: ");
		result.append(wateringQuantity);
		result.append(", kDaysToConsider: ");
		result.append(kDaysToConsider);
		result.append(')');
		return result.toString();
	}

} //ExploitationAnalysisImpl
