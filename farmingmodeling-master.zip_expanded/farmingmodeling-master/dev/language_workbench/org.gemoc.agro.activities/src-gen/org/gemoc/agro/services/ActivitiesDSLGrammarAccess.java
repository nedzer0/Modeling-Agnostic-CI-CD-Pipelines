/*
* generated by Xtext
*/
package org.gemoc.agro.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ActivitiesDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCulturesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCulturesCultureParserRuleCall_0_0 = (RuleCall)cCulturesAssignment_0.eContents().get(0);
		private final Assignment cResourceKindsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cResourceKindsResourceKindParserRuleCall_1_0 = (RuleCall)cResourceKindsAssignment_1.eContents().get(0);
		
		//Model:
		//	cultures+=Culture* resourceKinds+=ResourceKind*;
		public ParserRule getRule() { return rule; }

		//cultures+=Culture* resourceKinds+=ResourceKind*
		public Group getGroup() { return cGroup; }

		//cultures+=Culture*
		public Assignment getCulturesAssignment_0() { return cCulturesAssignment_0; }

		//Culture
		public RuleCall getCulturesCultureParserRuleCall_0_0() { return cCulturesCultureParserRuleCall_0_0; }

		//resourceKinds+=ResourceKind*
		public Assignment getResourceKindsAssignment_1() { return cResourceKindsAssignment_1; }

		//ResourceKind
		public RuleCall getResourceKindsResourceKindParserRuleCall_1_0() { return cResourceKindsResourceKindParserRuleCall_1_0; }
	}

	public class ResourceKindElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ResourceKind");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cResourceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ResourceKind:
		//	"resource" name=ID;
		public ParserRule getRule() { return rule; }

		//"resource" name=ID
		public Group getGroup() { return cGroup; }

		//"resource"
		public Keyword getResourceKeyword_0() { return cResourceKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class CultureElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Culture");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCultureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cActivitiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cActivitiesExploitationActivityParserRuleCall_3_0 = (RuleCall)cActivitiesAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Culture:
		//	"culture" name=ID "{" activities+=ExploitationActivity* "}";
		public ParserRule getRule() { return rule; }

		//"culture" name=ID "{" activities+=ExploitationActivity* "}"
		public Group getGroup() { return cGroup; }

		//"culture"
		public Keyword getCultureKeyword_0() { return cCultureKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//activities+=ExploitationActivity*
		public Assignment getActivitiesAssignment_3() { return cActivitiesAssignment_3; }

		//ExploitationActivity
		public RuleCall getActivitiesExploitationActivityParserRuleCall_3_0() { return cActivitiesExploitationActivityParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ExploitationActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExploitationActivity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActivityKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cFrequencyAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFrequencyFrequencyEnumRuleCall_2_0 = (RuleCall)cFrequencyAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFromKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cStartDateAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cStartDateDateParserRuleCall_3_1_0 = (RuleCall)cStartDateAssignment_3_1.eContents().get(0);
		private final Keyword cToKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cEndDateAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cEndDateDateParserRuleCall_3_3_0 = (RuleCall)cEndDateAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftSquareBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cPredicatesAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cPredicatesPredicateParserRuleCall_4_1_0 = (RuleCall)cPredicatesAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cAmpersandAmpersandKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cPredicatesAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cPredicatesPredicateParserRuleCall_4_2_1_0 = (RuleCall)cPredicatesAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUsingKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cUsesAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cUsesActivityResourceParserRuleCall_5_1_0 = (RuleCall)cUsesAssignment_5_1.eContents().get(0);
		private final Group cGroup_5_2 = (Group)cGroup_5.eContents().get(2);
		private final Keyword cAndKeyword_5_2_0 = (Keyword)cGroup_5_2.eContents().get(0);
		private final Assignment cUsesAssignment_5_2_1 = (Assignment)cGroup_5_2.eContents().get(1);
		private final RuleCall cUsesActivityResourceParserRuleCall_5_2_1_0 = (RuleCall)cUsesAssignment_5_2_1.eContents().get(0);
		
		//ExploitationActivity:
		//	"activity" name=ID frequency=Frequency? ("from " startDate=Date "to" endDate=Date)? ("[" predicates+=Predicate ("&&"
		//	predicates+=Predicate)* "]")? ("using" uses+=ActivityResource ("and" uses+=ActivityResource)*)?;
		public ParserRule getRule() { return rule; }

		//"activity" name=ID frequency=Frequency? ("from " startDate=Date "to" endDate=Date)? ("[" predicates+=Predicate ("&&"
		//predicates+=Predicate)* "]")? ("using" uses+=ActivityResource ("and" uses+=ActivityResource)*)?
		public Group getGroup() { return cGroup; }

		//"activity"
		public Keyword getActivityKeyword_0() { return cActivityKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//frequency=Frequency?
		public Assignment getFrequencyAssignment_2() { return cFrequencyAssignment_2; }

		//Frequency
		public RuleCall getFrequencyFrequencyEnumRuleCall_2_0() { return cFrequencyFrequencyEnumRuleCall_2_0; }

		//("from " startDate=Date "to" endDate=Date)?
		public Group getGroup_3() { return cGroup_3; }

		//"from "
		public Keyword getFromKeyword_3_0() { return cFromKeyword_3_0; }

		//startDate=Date
		public Assignment getStartDateAssignment_3_1() { return cStartDateAssignment_3_1; }

		//Date
		public RuleCall getStartDateDateParserRuleCall_3_1_0() { return cStartDateDateParserRuleCall_3_1_0; }

		//"to"
		public Keyword getToKeyword_3_2() { return cToKeyword_3_2; }

		//endDate=Date
		public Assignment getEndDateAssignment_3_3() { return cEndDateAssignment_3_3; }

		//Date
		public RuleCall getEndDateDateParserRuleCall_3_3_0() { return cEndDateDateParserRuleCall_3_3_0; }

		//("[" predicates+=Predicate ("&&" predicates+=Predicate)* "]")?
		public Group getGroup_4() { return cGroup_4; }

		//"["
		public Keyword getLeftSquareBracketKeyword_4_0() { return cLeftSquareBracketKeyword_4_0; }

		//predicates+=Predicate
		public Assignment getPredicatesAssignment_4_1() { return cPredicatesAssignment_4_1; }

		//Predicate
		public RuleCall getPredicatesPredicateParserRuleCall_4_1_0() { return cPredicatesPredicateParserRuleCall_4_1_0; }

		//("&&" predicates+=Predicate)*
		public Group getGroup_4_2() { return cGroup_4_2; }

		//"&&"
		public Keyword getAmpersandAmpersandKeyword_4_2_0() { return cAmpersandAmpersandKeyword_4_2_0; }

		//predicates+=Predicate
		public Assignment getPredicatesAssignment_4_2_1() { return cPredicatesAssignment_4_2_1; }

		//Predicate
		public RuleCall getPredicatesPredicateParserRuleCall_4_2_1_0() { return cPredicatesPredicateParserRuleCall_4_2_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_4_3() { return cRightSquareBracketKeyword_4_3; }

		//("using" uses+=ActivityResource ("and" uses+=ActivityResource)*)?
		public Group getGroup_5() { return cGroup_5; }

		//"using"
		public Keyword getUsingKeyword_5_0() { return cUsingKeyword_5_0; }

		//uses+=ActivityResource
		public Assignment getUsesAssignment_5_1() { return cUsesAssignment_5_1; }

		//ActivityResource
		public RuleCall getUsesActivityResourceParserRuleCall_5_1_0() { return cUsesActivityResourceParserRuleCall_5_1_0; }

		//("and" uses+=ActivityResource)*
		public Group getGroup_5_2() { return cGroup_5_2; }

		//"and"
		public Keyword getAndKeyword_5_2_0() { return cAndKeyword_5_2_0; }

		//uses+=ActivityResource
		public Assignment getUsesAssignment_5_2_1() { return cUsesAssignment_5_2_1; }

		//ActivityResource
		public RuleCall getUsesActivityResourceParserRuleCall_5_2_1_0() { return cUsesActivityResourceParserRuleCall_5_2_1_0; }
	}

	public class ActivityResourceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActivityResource");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cQuantityAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cQuantityINTTerminalRuleCall_0_0 = (RuleCall)cQuantityAssignment_0.eContents().get(0);
		private final Assignment cResourceKindAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cResourceKindResourceKindCrossReference_1_0 = (CrossReference)cResourceKindAssignment_1.eContents().get(0);
		private final RuleCall cResourceKindResourceKindIDTerminalRuleCall_1_0_1 = (RuleCall)cResourceKindResourceKindCrossReference_1_0.eContents().get(1);
		
		//ActivityResource:
		//	quantity=INT resourceKind=[ResourceKind];
		public ParserRule getRule() { return rule; }

		//quantity=INT resourceKind=[ResourceKind]
		public Group getGroup() { return cGroup; }

		//quantity=INT
		public Assignment getQuantityAssignment_0() { return cQuantityAssignment_0; }

		//INT
		public RuleCall getQuantityINTTerminalRuleCall_0_0() { return cQuantityINTTerminalRuleCall_0_0; }

		//resourceKind=[ResourceKind]
		public Assignment getResourceKindAssignment_1() { return cResourceKindAssignment_1; }

		//[ResourceKind]
		public CrossReference getResourceKindResourceKindCrossReference_1_0() { return cResourceKindResourceKindCrossReference_1_0; }

		//ID
		public RuleCall getResourceKindResourceKindIDTerminalRuleCall_1_0_1() { return cResourceKindResourceKindIDTerminalRuleCall_1_0_1; }
	}

	public class PredicateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Predicate");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cNoRainParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTempOfTheDayParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cDelaySinceActivyParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cGrainIsParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Predicate:
		//	NoRain | TempOfTheDay | DelaySinceActivy | GrainIs;
		public ParserRule getRule() { return rule; }

		//NoRain | TempOfTheDay | DelaySinceActivy | GrainIs
		public Alternatives getAlternatives() { return cAlternatives; }

		//NoRain
		public RuleCall getNoRainParserRuleCall_0() { return cNoRainParserRuleCall_0; }

		//TempOfTheDay
		public RuleCall getTempOfTheDayParserRuleCall_1() { return cTempOfTheDayParserRuleCall_1; }

		//DelaySinceActivy
		public RuleCall getDelaySinceActivyParserRuleCall_2() { return cDelaySinceActivyParserRuleCall_2; }

		//GrainIs
		public RuleCall getGrainIsParserRuleCall_3() { return cGrainIsParserRuleCall_3; }
	}

	public class NoRainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NoRain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNoRainSinceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDaysAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDaysINTTerminalRuleCall_1_0 = (RuleCall)cDaysAssignment_1.eContents().get(0);
		private final Keyword cDaysKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//NoRain:
		//	"no rain since" days=INT "days";
		public ParserRule getRule() { return rule; }

		//"no rain since" days=INT "days"
		public Group getGroup() { return cGroup; }

		//"no rain since"
		public Keyword getNoRainSinceKeyword_0() { return cNoRainSinceKeyword_0; }

		//days=INT
		public Assignment getDaysAssignment_1() { return cDaysAssignment_1; }

		//INT
		public RuleCall getDaysINTTerminalRuleCall_1_0() { return cDaysINTTerminalRuleCall_1_0; }

		//"days"
		public Keyword getDaysKeyword_2() { return cDaysKeyword_2; }
	}

	public class TempOfTheDayElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TempOfTheDay");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTemperatureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cComparisonAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cComparisonCompEnumRuleCall_1_0 = (RuleCall)cComparisonAssignment_1.eContents().get(0);
		private final Assignment cLowerTempBoundAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLowerTempBoundINTTerminalRuleCall_2_0 = (RuleCall)cLowerTempBoundAssignment_2.eContents().get(0);
		private final Assignment cUnitAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cUnitTempUnitEnumRuleCall_3_0 = (RuleCall)cUnitAssignment_3.eContents().get(0);
		
		//TempOfTheDay:
		//	"temperature" comparison=Comp lowerTempBound=INT unit=TempUnit;
		public ParserRule getRule() { return rule; }

		//"temperature" comparison=Comp lowerTempBound=INT unit=TempUnit
		public Group getGroup() { return cGroup; }

		//"temperature"
		public Keyword getTemperatureKeyword_0() { return cTemperatureKeyword_0; }

		//comparison=Comp
		public Assignment getComparisonAssignment_1() { return cComparisonAssignment_1; }

		//Comp
		public RuleCall getComparisonCompEnumRuleCall_1_0() { return cComparisonCompEnumRuleCall_1_0; }

		//lowerTempBound=INT
		public Assignment getLowerTempBoundAssignment_2() { return cLowerTempBoundAssignment_2; }

		//INT
		public RuleCall getLowerTempBoundINTTerminalRuleCall_2_0() { return cLowerTempBoundINTTerminalRuleCall_2_0; }

		//unit=TempUnit
		public Assignment getUnitAssignment_3() { return cUnitAssignment_3; }

		//TempUnit
		public RuleCall getUnitTempUnitEnumRuleCall_3_0() { return cUnitTempUnitEnumRuleCall_3_0; }
	}

	public class DelaySinceActivyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DelaySinceActivy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAfterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cPrerequisiteAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cPrerequisiteExploitationActivityCrossReference_1_0 = (CrossReference)cPrerequisiteAssignment_1.eContents().get(0);
		private final RuleCall cPrerequisiteExploitationActivityIDTerminalRuleCall_1_0_1 = (RuleCall)cPrerequisiteExploitationActivityCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIsDoneSinceKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cDaysAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cDaysINTTerminalRuleCall_2_1_0 = (RuleCall)cDaysAssignment_2_1.eContents().get(0);
		private final Keyword cDaysKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//DelaySinceActivy:
		//	"after" prerequisite=[ExploitationActivity] ("is done since" days=INT "days")?;
		public ParserRule getRule() { return rule; }

		//"after" prerequisite=[ExploitationActivity] ("is done since" days=INT "days")?
		public Group getGroup() { return cGroup; }

		//"after"
		public Keyword getAfterKeyword_0() { return cAfterKeyword_0; }

		//prerequisite=[ExploitationActivity]
		public Assignment getPrerequisiteAssignment_1() { return cPrerequisiteAssignment_1; }

		//[ExploitationActivity]
		public CrossReference getPrerequisiteExploitationActivityCrossReference_1_0() { return cPrerequisiteExploitationActivityCrossReference_1_0; }

		//ID
		public RuleCall getPrerequisiteExploitationActivityIDTerminalRuleCall_1_0_1() { return cPrerequisiteExploitationActivityIDTerminalRuleCall_1_0_1; }

		//("is done since" days=INT "days")?
		public Group getGroup_2() { return cGroup_2; }

		//"is done since"
		public Keyword getIsDoneSinceKeyword_2_0() { return cIsDoneSinceKeyword_2_0; }

		//days=INT
		public Assignment getDaysAssignment_2_1() { return cDaysAssignment_2_1; }

		//INT
		public RuleCall getDaysINTTerminalRuleCall_2_1_0() { return cDaysINTTerminalRuleCall_2_1_0; }

		//"days"
		public Keyword getDaysKeyword_2_2() { return cDaysKeyword_2_2; }
	}

	public class GrainIsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GrainIs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGrainIsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStateSTRINGTerminalRuleCall_1_0 = (RuleCall)cStateAssignment_1.eContents().get(0);
		
		//GrainIs:
		//	"grain is" state=STRING;
		public ParserRule getRule() { return rule; }

		//"grain is" state=STRING
		public Group getGroup() { return cGroup; }

		//"grain is"
		public Keyword getGrainIsKeyword_0() { return cGrainIsKeyword_0; }

		//state=STRING
		public Assignment getStateAssignment_1() { return cStateAssignment_1; }

		//STRING
		public RuleCall getStateSTRINGTerminalRuleCall_1_0() { return cStateSTRINGTerminalRuleCall_1_0; }
	}

	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Date");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDayAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDayINTTerminalRuleCall_0_0 = (RuleCall)cDayAssignment_0.eContents().get(0);
		private final Assignment cMonthAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMonthMonthEnumRuleCall_1_0 = (RuleCall)cMonthAssignment_1.eContents().get(0);
		
		//Date:
		//	day=INT month=Month;
		public ParserRule getRule() { return rule; }

		//day=INT month=Month
		public Group getGroup() { return cGroup; }

		//day=INT
		public Assignment getDayAssignment_0() { return cDayAssignment_0; }

		//INT
		public RuleCall getDayINTTerminalRuleCall_0_0() { return cDayINTTerminalRuleCall_0_0; }

		//month=Month
		public Assignment getMonthAssignment_1() { return cMonthAssignment_1; }

		//Month
		public RuleCall getMonthMonthEnumRuleCall_1_0() { return cMonthMonthEnumRuleCall_1_0; }
	}
	
	
	public class MonthElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Month");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cJanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cJanJanKeyword_0_0 = (Keyword)cJanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFebEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFebFebKeyword_1_0 = (Keyword)cFebEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cMarEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cMarMarKeyword_2_0 = (Keyword)cMarEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cAprEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cAprAprKeyword_3_0 = (Keyword)cAprEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cMayEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cMayMayKeyword_4_0 = (Keyword)cMayEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cJunEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cJunJunKeyword_5_0 = (Keyword)cJunEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cJulEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cJulJulKeyword_6_0 = (Keyword)cJulEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cAugEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cAugAugKeyword_7_0 = (Keyword)cAugEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cSeptEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cSeptSeptKeyword_8_0 = (Keyword)cSeptEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cOctEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cOctOctKeyword_9_0 = (Keyword)cOctEnumLiteralDeclaration_9.eContents().get(0);
		private final EnumLiteralDeclaration cNovEnumLiteralDeclaration_10 = (EnumLiteralDeclaration)cAlternatives.eContents().get(10);
		private final Keyword cNovNovKeyword_10_0 = (Keyword)cNovEnumLiteralDeclaration_10.eContents().get(0);
		private final EnumLiteralDeclaration cDecEnumLiteralDeclaration_11 = (EnumLiteralDeclaration)cAlternatives.eContents().get(11);
		private final Keyword cDecDecKeyword_11_0 = (Keyword)cDecEnumLiteralDeclaration_11.eContents().get(0);
		
		//enum Month:
		//	jan | feb | mar | apr | may | jun | jul | aug | sept | oct | nov | dec;
		public EnumRule getRule() { return rule; }

		//jan | feb | mar | apr | may | jun | jul | aug | sept | oct | nov | dec
		public Alternatives getAlternatives() { return cAlternatives; }

		//jan
		public EnumLiteralDeclaration getJanEnumLiteralDeclaration_0() { return cJanEnumLiteralDeclaration_0; }

		//"jan"
		public Keyword getJanJanKeyword_0_0() { return cJanJanKeyword_0_0; }

		//feb
		public EnumLiteralDeclaration getFebEnumLiteralDeclaration_1() { return cFebEnumLiteralDeclaration_1; }

		//"feb"
		public Keyword getFebFebKeyword_1_0() { return cFebFebKeyword_1_0; }

		//mar
		public EnumLiteralDeclaration getMarEnumLiteralDeclaration_2() { return cMarEnumLiteralDeclaration_2; }

		//"mar"
		public Keyword getMarMarKeyword_2_0() { return cMarMarKeyword_2_0; }

		//apr
		public EnumLiteralDeclaration getAprEnumLiteralDeclaration_3() { return cAprEnumLiteralDeclaration_3; }

		//"apr"
		public Keyword getAprAprKeyword_3_0() { return cAprAprKeyword_3_0; }

		//may
		public EnumLiteralDeclaration getMayEnumLiteralDeclaration_4() { return cMayEnumLiteralDeclaration_4; }

		//"may"
		public Keyword getMayMayKeyword_4_0() { return cMayMayKeyword_4_0; }

		//jun
		public EnumLiteralDeclaration getJunEnumLiteralDeclaration_5() { return cJunEnumLiteralDeclaration_5; }

		//"jun"
		public Keyword getJunJunKeyword_5_0() { return cJunJunKeyword_5_0; }

		//jul
		public EnumLiteralDeclaration getJulEnumLiteralDeclaration_6() { return cJulEnumLiteralDeclaration_6; }

		//"jul"
		public Keyword getJulJulKeyword_6_0() { return cJulJulKeyword_6_0; }

		//aug
		public EnumLiteralDeclaration getAugEnumLiteralDeclaration_7() { return cAugEnumLiteralDeclaration_7; }

		//"aug"
		public Keyword getAugAugKeyword_7_0() { return cAugAugKeyword_7_0; }

		//sept
		public EnumLiteralDeclaration getSeptEnumLiteralDeclaration_8() { return cSeptEnumLiteralDeclaration_8; }

		//"sept"
		public Keyword getSeptSeptKeyword_8_0() { return cSeptSeptKeyword_8_0; }

		//oct
		public EnumLiteralDeclaration getOctEnumLiteralDeclaration_9() { return cOctEnumLiteralDeclaration_9; }

		//"oct"
		public Keyword getOctOctKeyword_9_0() { return cOctOctKeyword_9_0; }

		//nov
		public EnumLiteralDeclaration getNovEnumLiteralDeclaration_10() { return cNovEnumLiteralDeclaration_10; }

		//"nov"
		public Keyword getNovNovKeyword_10_0() { return cNovNovKeyword_10_0; }

		//dec
		public EnumLiteralDeclaration getDecEnumLiteralDeclaration_11() { return cDecEnumLiteralDeclaration_11; }

		//"dec"
		public Keyword getDecDecKeyword_11_0() { return cDecDecKeyword_11_0; }
	}

	public class CompElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Comp");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMoreThanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMoreThanGreaterThanSignKeyword_0_0 = (Keyword)cMoreThanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLessThanEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLessThanLessThanSignKeyword_1_0 = (Keyword)cLessThanEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Comp:
		//	moreThan=">" | lessThan="<";
		public EnumRule getRule() { return rule; }

		//moreThan=">" | lessThan="<"
		public Alternatives getAlternatives() { return cAlternatives; }

		//moreThan=">"
		public EnumLiteralDeclaration getMoreThanEnumLiteralDeclaration_0() { return cMoreThanEnumLiteralDeclaration_0; }

		//">"
		public Keyword getMoreThanGreaterThanSignKeyword_0_0() { return cMoreThanGreaterThanSignKeyword_0_0; }

		//lessThan="<"
		public EnumLiteralDeclaration getLessThanEnumLiteralDeclaration_1() { return cLessThanEnumLiteralDeclaration_1; }

		//"<"
		public Keyword getLessThanLessThanSignKeyword_1_0() { return cLessThanLessThanSignKeyword_1_0; }
	}

	public class TempUnitElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "TempUnit");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCelsiusEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCelsiusCKeyword_0_0 = (Keyword)cCelsiusEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cFarenheitEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cFarenheitFKeyword_1_0 = (Keyword)cFarenheitEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TempUnit:
		//	celsius="°C" | farenheit="°F";
		public EnumRule getRule() { return rule; }

		//celsius="°C" | farenheit="°F"
		public Alternatives getAlternatives() { return cAlternatives; }

		//celsius="°C"
		public EnumLiteralDeclaration getCelsiusEnumLiteralDeclaration_0() { return cCelsiusEnumLiteralDeclaration_0; }

		//"°C"
		public Keyword getCelsiusCKeyword_0_0() { return cCelsiusCKeyword_0_0; }

		//farenheit="°F"
		public EnumLiteralDeclaration getFarenheitEnumLiteralDeclaration_1() { return cFarenheitEnumLiteralDeclaration_1; }

		//"°F"
		public Keyword getFarenheitFKeyword_1_0() { return cFarenheitFKeyword_1_0; }
	}

	public class FrequencyElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Frequency");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cOnceEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cOnceOnceKeyword_0_0 = (Keyword)cOnceEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDailyEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDailyDailyKeyword_1_0 = (Keyword)cDailyEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cWeeklyEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cWeeklyWeeklyKeyword_2_0 = (Keyword)cWeeklyEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cMonthlyEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cMonthlyMonthlyKeyword_3_0 = (Keyword)cMonthlyEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cQuaterlyEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cQuaterlyQuaterlyKeyword_4_0 = (Keyword)cQuaterlyEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cYearlyEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cYearlyYearlyKeyword_5_0 = (Keyword)cYearlyEnumLiteralDeclaration_5.eContents().get(0);
		
		//enum Frequency:
		//	once | daily | weekly | monthly | quaterly | yearly;
		public EnumRule getRule() { return rule; }

		//once | daily | weekly | monthly | quaterly | yearly
		public Alternatives getAlternatives() { return cAlternatives; }

		//once
		public EnumLiteralDeclaration getOnceEnumLiteralDeclaration_0() { return cOnceEnumLiteralDeclaration_0; }

		//"once"
		public Keyword getOnceOnceKeyword_0_0() { return cOnceOnceKeyword_0_0; }

		//daily
		public EnumLiteralDeclaration getDailyEnumLiteralDeclaration_1() { return cDailyEnumLiteralDeclaration_1; }

		//"daily"
		public Keyword getDailyDailyKeyword_1_0() { return cDailyDailyKeyword_1_0; }

		//weekly
		public EnumLiteralDeclaration getWeeklyEnumLiteralDeclaration_2() { return cWeeklyEnumLiteralDeclaration_2; }

		//"weekly"
		public Keyword getWeeklyWeeklyKeyword_2_0() { return cWeeklyWeeklyKeyword_2_0; }

		//monthly
		public EnumLiteralDeclaration getMonthlyEnumLiteralDeclaration_3() { return cMonthlyEnumLiteralDeclaration_3; }

		//"monthly"
		public Keyword getMonthlyMonthlyKeyword_3_0() { return cMonthlyMonthlyKeyword_3_0; }

		//quaterly
		public EnumLiteralDeclaration getQuaterlyEnumLiteralDeclaration_4() { return cQuaterlyEnumLiteralDeclaration_4; }

		//"quaterly"
		public Keyword getQuaterlyQuaterlyKeyword_4_0() { return cQuaterlyQuaterlyKeyword_4_0; }

		//yearly
		public EnumLiteralDeclaration getYearlyEnumLiteralDeclaration_5() { return cYearlyEnumLiteralDeclaration_5; }

		//"yearly"
		public Keyword getYearlyYearlyKeyword_5_0() { return cYearlyYearlyKeyword_5_0; }
	}
	
	private final ModelElements pModel;
	private final ResourceKindElements pResourceKind;
	private final CultureElements pCulture;
	private final ExploitationActivityElements pExploitationActivity;
	private final ActivityResourceElements pActivityResource;
	private final PredicateElements pPredicate;
	private final NoRainElements pNoRain;
	private final TempOfTheDayElements pTempOfTheDay;
	private final DelaySinceActivyElements pDelaySinceActivy;
	private final GrainIsElements pGrainIs;
	private final DateElements pDate;
	private final MonthElements unknownRuleMonth;
	private final CompElements unknownRuleComp;
	private final TempUnitElements unknownRuleTempUnit;
	private final FrequencyElements unknownRuleFrequency;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ActivitiesDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pResourceKind = new ResourceKindElements();
		this.pCulture = new CultureElements();
		this.pExploitationActivity = new ExploitationActivityElements();
		this.pActivityResource = new ActivityResourceElements();
		this.pPredicate = new PredicateElements();
		this.pNoRain = new NoRainElements();
		this.pTempOfTheDay = new TempOfTheDayElements();
		this.pDelaySinceActivy = new DelaySinceActivyElements();
		this.pGrainIs = new GrainIsElements();
		this.pDate = new DateElements();
		this.unknownRuleMonth = new MonthElements();
		this.unknownRuleComp = new CompElements();
		this.unknownRuleTempUnit = new TempUnitElements();
		this.unknownRuleFrequency = new FrequencyElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.gemoc.agro.ActivitiesDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	cultures+=Culture* resourceKinds+=ResourceKind*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//ResourceKind:
	//	"resource" name=ID;
	public ResourceKindElements getResourceKindAccess() {
		return pResourceKind;
	}
	
	public ParserRule getResourceKindRule() {
		return getResourceKindAccess().getRule();
	}

	//Culture:
	//	"culture" name=ID "{" activities+=ExploitationActivity* "}";
	public CultureElements getCultureAccess() {
		return pCulture;
	}
	
	public ParserRule getCultureRule() {
		return getCultureAccess().getRule();
	}

	//ExploitationActivity:
	//	"activity" name=ID frequency=Frequency? ("from " startDate=Date "to" endDate=Date)? ("[" predicates+=Predicate ("&&"
	//	predicates+=Predicate)* "]")? ("using" uses+=ActivityResource ("and" uses+=ActivityResource)*)?;
	public ExploitationActivityElements getExploitationActivityAccess() {
		return pExploitationActivity;
	}
	
	public ParserRule getExploitationActivityRule() {
		return getExploitationActivityAccess().getRule();
	}

	//ActivityResource:
	//	quantity=INT resourceKind=[ResourceKind];
	public ActivityResourceElements getActivityResourceAccess() {
		return pActivityResource;
	}
	
	public ParserRule getActivityResourceRule() {
		return getActivityResourceAccess().getRule();
	}

	//Predicate:
	//	NoRain | TempOfTheDay | DelaySinceActivy | GrainIs;
	public PredicateElements getPredicateAccess() {
		return pPredicate;
	}
	
	public ParserRule getPredicateRule() {
		return getPredicateAccess().getRule();
	}

	//NoRain:
	//	"no rain since" days=INT "days";
	public NoRainElements getNoRainAccess() {
		return pNoRain;
	}
	
	public ParserRule getNoRainRule() {
		return getNoRainAccess().getRule();
	}

	//TempOfTheDay:
	//	"temperature" comparison=Comp lowerTempBound=INT unit=TempUnit;
	public TempOfTheDayElements getTempOfTheDayAccess() {
		return pTempOfTheDay;
	}
	
	public ParserRule getTempOfTheDayRule() {
		return getTempOfTheDayAccess().getRule();
	}

	//DelaySinceActivy:
	//	"after" prerequisite=[ExploitationActivity] ("is done since" days=INT "days")?;
	public DelaySinceActivyElements getDelaySinceActivyAccess() {
		return pDelaySinceActivy;
	}
	
	public ParserRule getDelaySinceActivyRule() {
		return getDelaySinceActivyAccess().getRule();
	}

	//GrainIs:
	//	"grain is" state=STRING;
	public GrainIsElements getGrainIsAccess() {
		return pGrainIs;
	}
	
	public ParserRule getGrainIsRule() {
		return getGrainIsAccess().getRule();
	}

	//Date:
	//	day=INT month=Month;
	public DateElements getDateAccess() {
		return pDate;
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}

	//enum Month:
	//	jan | feb | mar | apr | may | jun | jul | aug | sept | oct | nov | dec;
	public MonthElements getMonthAccess() {
		return unknownRuleMonth;
	}
	
	public EnumRule getMonthRule() {
		return getMonthAccess().getRule();
	}

	//enum Comp:
	//	moreThan=">" | lessThan="<";
	public CompElements getCompAccess() {
		return unknownRuleComp;
	}
	
	public EnumRule getCompRule() {
		return getCompAccess().getRule();
	}

	//enum TempUnit:
	//	celsius="°C" | farenheit="°F";
	public TempUnitElements getTempUnitAccess() {
		return unknownRuleTempUnit;
	}
	
	public EnumRule getTempUnitRule() {
		return getTempUnitAccess().getRule();
	}

	//enum Frequency:
	//	once | daily | weekly | monthly | quaterly | yearly;
	public FrequencyElements getFrequencyAccess() {
		return unknownRuleFrequency;
	}
	
	public EnumRule getFrequencyRule() {
		return getFrequencyAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
