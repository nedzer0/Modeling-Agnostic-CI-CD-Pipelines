/*
 * generated by Xtext 2.34.0
 */
package org.xtext.example.gha.formatting2

import com.google.inject.Inject
import gHA_metamodel.Job
import gHA_metamodel.Pipeline
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.xtext.example.gha.services.GHAGrammarAccess

class GHAFormatter extends AbstractFormatter2 {
	
	@Inject extension GHAGrammarAccess

	def dispatch void format(Pipeline pipeline, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (env : pipeline.envs) {
			env.format
		}
		for (permission : pipeline.permissions) {
			permission.format
		}
		pipeline.defaultsetting.format
		pipeline.concurrency.format
		for (trigger : pipeline.triggers) {
			trigger.format
		}
		for (job : pipeline.jobs) {
			job.format
		}
	}

	def dispatch void format(Job job, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (permission : job.permissions) {
			permission.format
		}
		job.need.format
		job.^if.format
		job.runner.format
		job.environment.format
		job.concurrency.format
		for (output : job.outputs) {
			output.format
		}
		for (env : job.envs) {
			env.format
		}
		job.defaultsetting.format
		job.container.format
		for (service : job.services) {
			service.format
		}
		for (action : job.actions) {
			action.format
		}
		for (secret : job.secrets) {
			secret.format
		}
		job.strategy.format
		for (step : job.steps) {
			step.format
		}
	}
	
	// TODO: implement for PushTrigger, PullTrigger, WorkflowCallTrigger, WorkflowDispatchTrigger, WorkflowRunTrigger, PullTargetTrigger, Step, Strategy, Service, Action, Container, Artifact, Docker, RestoreCache, SaveCache
}
