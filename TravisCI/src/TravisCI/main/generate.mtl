[comment encoding = UTF-8 /]
[module generate('http://www.example.org/travisCI_metamodel')]


[template public generateElement(aPipeline : Pipeline)]
[comment @main/]
[file ('TravisCI' + '.yml', false, 'UTF-8')]
[generateLanguage(aPipeline)/]
[generateInstall(aPipeline)/]
[generateEnvironment(aPipeline)/]
[generateBranches(aPipeline)/]
[generateServices(aPipeline)/]
[generateStages(aPipeline)/]
[generateJobs(aPipeline)/]
[/file]
[/template]

[template public generateLanguage(aPipeline: Pipeline)]
[if (aPipeline.language.name->notEmpty())]
language: [aPipeline.language.name/]
[if (aPipeline.language.version->notEmpty())]
[aPipeline.language.name/]:
  - '[aPipeline.language.version/]'
[/if]
[/if]
[/template]


[comment install dependencies/]
[template public generateInstall(aPipeline: Pipeline)]
[if (aPipeline.install->notEmpty())]
install:
[for (i: Install | aPipeline.install)]
  - [i.name/]
[/for]
[/if]
[/template]


[template public generateEnvironment(aPipeline: Pipeline)]
[if (aPipeline.pipeline_environment->notEmpty())]
env:
[if (aPipeline.pipeline_environment->exists(env | env.env_type.toString() = 'DEFAULT'))]
[for (e: Environment | aPipeline.pipeline_environment->select(env | env.env_type.toString() = 'DEFAULT'))]
  - [generateKeyValue(e)/]
[/for]
[/if]

[if (aPipeline.pipeline_environment->exists(env | env.env_type.toString() = 'GLOBAL'))]
  global:
  [for (e: Environment | aPipeline.pipeline_environment->select(env | env.env_type.toString() = 'GLOBAL'))]
    - [generateKeyValue(e)/]
  [/for]
[/if]

[if (aPipeline.pipeline_environment->exists(env | env.env_type.toString() = 'JOBS'))]
  jobs:
  [for (e: Environment | aPipeline.pipeline_environment->select(env | env.env_type.toString() = 'JOBS'))]
    - [generateKeyValue(e)/]
  [/for]
[/if]
[/if]
[/template]

[template public generateKeyValue(aEnv : Environment)]
[aEnv.key/]=[aEnv.value/]
[/template]


[template public generateBranches(aPipeline: Pipeline)]
[if (aPipeline.branch->notEmpty()) ]
branches:
[generateSafelistTriggers(aPipeline)/]
[generateBlocklistTriggers(aPipeline)/]
[/if]
[/template]

[template public generateSafelistTriggers(aPipeline: Pipeline)]
[if (aPipeline.branch->exists(b | b.branch_type.toString() = 'SAFELIST'))]
only:
[for (b: Branch | aPipeline.branch->select(b | b.branch_type.toString() = 'SAFELIST'))]
  - [b.name/]
[/for]
[/if]
[/template]

[template public generateBlocklistTriggers(aPipeline: Pipeline)]
[if (aPipeline.branch->exists(b | b.branch_type.toString() = 'BLOCKLIST'))]
except:
[for (b: Branch | aPipeline.branch->select(b | b.branch_type.toString() = 'BLOCKLIST'))]
  - [b.name/]
[/for]
[/if]
[/template]


[template public generateServices(aPipeline: Pipeline)]
[if (aPipeline.service->notEmpty())]
services: 
[for (s: Service | aPipeline.service)]
  - [s.name/]
[/for]
[/if]
[/template]


[template public generateStages(aPipeline: Pipeline)]
[if (aPipeline.stage->notEmpty())]
stages:
[for (s: Stage | aPipeline.stage)]
  - [s.name/]
[/for]
[if (aPipeline.stage._if->notEmpty())]
if: [aPipeline.stage._if.condition/]
[/if]
[/if]
[/template]

[template public generateJobs(aPipeline : Pipeline)]
jobs:
[if (aPipeline.job->exists(j | j.fast_finish))]
  fast_finish: true
[/if]
  [generateAllowFailures(aPipeline)/]
  [if (aPipeline.job->exists(j | j.job_type.toString() = 'INCLUDE'))]
  include:
  [for (j: Job | aPipeline.job->select(j | j.job_type.toString() = 'INCLUDE'))]
    [generateJob(j)/]
  [/for]
  [/if]
  [if (aPipeline.job->exists(j | j.job_type.toString() = 'EXCLUDE'))]
  exclude:
  [for (j: Job | aPipeline.job->select(j | j.job_type.toString() = 'EXCLUDE'))]
    [generateJob(j)/]
  [/for]
  [/if]
[/template]


[template public generateAllowFailures(aPipeline : Pipeline)]
[if (aPipeline.allow_failure->notEmpty())]
allow_failures:
[for (f: Allow_Failure | aPipeline.allow_failure)]
  - [generateKeyValue(f)/]
[/for]
  [if (aPipeline.allow_failure.environment->notEmpty())]
  env:
  [for (e: Environment | aPipeline.allow_failure.environment)]
    [generateKeyValue(e)/]
  [/for]
  [/if]
  [if (aPipeline.allow_failure._if->notEmpty())]
  if: [aPipeline.allow_failure._if.condition/]
  [/if]
[/if]
[/template]

[template public generateKeyValue(afail : Allow_Failure)]
[afail.key/]: [afail.value/]
[/template]


[template public generateJob(aJob : Job)]
[if (aJob.stage_type.toString() <> 'NONE')]
stage: [aJob.stage_type/]
[/if]
[if (aJob.name->notEmpty())]
name: [aJob.name/]
[/if]
[generateJobLanguage(aJob)/]
[generateJobEnvironment(aJob)/]
[generateJobServices(aJob)/]
[generateIfJob(aJob)/]
[generateSteps(aJob)/]
[generateDeploys(aJob)/]
[generateArtifacts(aJob)/]
[/template]


[template public generateJobLanguage(aJob: Job)]
[if (aJob.language->notEmpty())]
[aJob.language.name/]: '[aJob.language.version/]'
[/if]
[/template]


[template public generateJobEnvironment(aJob: Job)]
[if (aJob.environment->notEmpty())]
env:
[for (e: Environment | aJob.environment)]
  - [generateKeyValue(e)/]
[/for]
[/if]
[/template]


[template public generateJobServices(aJob: Job)]
[if (aJob.service->notEmpty())]
services:
[for (s: Service | aJob.service)]
  - [s.name/]
[/for]
[/if]
[/template]


[template public generateIfJob(aJob: Job)]
[if (aJob._if->notEmpty())]
if: [aJob._if.condition/]
[/if]
[/template]


[template public generateSteps(aJob: Job)]
script:
[for (s: Script | aJob.script)]
  - [generateScript(s)/]
[/for]
[/template]

[template public generateScript(aScript: Script)]
[aScript.tool_framework.name/][generateParameters(aScript)/]
[/template]

[template public generateParameters(aScript: Script)]
[for (p: Parameters | aScript.parameters)] [p.parameter/] [/for]
[/template]


[template public generateArtifacts(aJob : Job)]
[if (aJob.artifact->notEmpty())]
artifacts:
  paths:
  [for (a: Artifact | aJob.artifact)]
    - [a.name/]
  [/for]
[/if]
[/template]


[template public generateDeploys(aJob : Job)]
[if (aJob.deploy->notEmpty())]
deploy:
[for (d: Deploy | aJob.deploy)]
  [generateDeploy(d)/]
[/for]
[/if]
[/template]

[template public generateDeploy(aDeploy : Deploy)]
[if (aDeploy.oclIsKindOf(GitHub))]
[generateGitHubDeploy(oclAsType(GitHub))/]
[/if]
[if (aDeploy.oclIsKindOf(Npm))]
[generateNpmDeploy(oclAsType(Npm))/]
[/if]
[if (aDeploy.oclIsKindOf(Rubygems))]
[generateRubygemsDeploy(oclAsType(Rubygems))/]
[/if]
[if (aDeploy.oclIsKindOf(Heroku))]
[generateHerokuDeploy(oclAsType(Heroku))/]
[/if]
[generateOnDeploy(aDeploy)/]
[/template]


[template public generateGitHubDeploy(gitHub : GitHub)]
provider: [gitHub.provider/]
api_key: [gitHub.api_key/]
file: [gitHub.file/]
skip_cleanup: [gitHub.skip_cleanup/]
[/template]

[template public generateNpmDeploy(n : Npm)]
provider: [n.provider/]
api_key: [n.api_key/]
[/template]


[template public generateRubygemsDeploy(ruby : Rubygems)]
provider: [ruby.provider/]
gem: [ruby.gem/]
api_key: [ruby.api_key/]
[/template]

[template public generateHerokuDeploy(heroku : Heroku)]
provider: [heroku.provider/]
app: [heroku.app/]
api_key: [heroku.api_key/]
[/template]


[template public generateOnDeploy(aDeploy : Deploy)]
[if (aDeploy.on->notEmpty())]
on: 
[for (on: On | aDeploy.on)]
  [on.key/]: [on.value/]
[/for]
[/if]
[/template]



