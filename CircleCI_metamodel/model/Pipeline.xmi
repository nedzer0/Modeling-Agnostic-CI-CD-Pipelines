<?xml version="1.0" encoding="UTF-8"?>
<circleCI_metamodel:Pipeline
    xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:circleCI_metamodel="http://www.example.org/circleCI_metamodel"
    version="2.1">
  <orbs key="node"
      value="circleci/node@x.y"/>
  <orbs key="node"
      value="circleci/node@3.0"/>
  <commands
      name="sayhello"
      description="A very simple command for demonstration purposes">
    <steps xsi:type="circleCI_metamodel:Run"
        name="">
      <run_commands
          name="echo"/>
      <parameters
          parameter="print this hello"/>
    </steps>
    <parameters
        name="to"
        type="enum"
        default="docs">
      <enumValues>enum1</enumValues>
      <enumValues>e2</enumValues>
    </parameters>
  </commands>
  <commands
      name="npm-install">
    <steps xsi:type="circleCI_metamodel:When_Unless"
        condition="&lt;&lt; parameters.clean >>">
      <when_step
          xsi:type="circleCI_metamodel:Run">
        <run_commands
            name="npm clean-install"/>
      </when_step>
      <unless_step
          xsi:type="circleCI_metamodel:Run">
        <run_commands
            name="npm install"/>
      </unless_step>
    </steps>
    <steps xsi:type="circleCI_metamodel:Run">
      <run_commands
          name="npm install"/>
    </steps>
    <parameters
        name="clean"
        type="boolean"
        default="false"
        description="Perform a clean install"/>
  </commands>
  <workflow
      name="build-deploy"
      version="2.0">
    <triggers
        cron="*/15 * * * *"/>
    <branches
        name="master"/>
    <branches
        name="branch1"/>
    <branches
        name="branch2"
        branch="ignore"/>
    <when_unless
        condition="conditionExpert = 0">
      <when_step
          xsi:type="circleCI_metamodel:Run">
        <run_commands
            name="echo 127.0.0.1 devhost | sudo tee -a /etc/hosts"/>
      </when_step>
    </when_unless>
    <jobworkflow
        name="Build">
      <branches
          name="/server\/.*/"/>
    </jobworkflow>
    <jobworkflow
        name="Test"
        approvalJob="true">
      <requires>Build</requires>
      <branches
          name="develop"
          branch="ignore"/>
      <branches
          name="/feature-.*/"
          branch="ignore"/>
      <matrix>
        <matrix_exclude
            key="a">
          <values>3</values>
        </matrix_exclude>
        <matrix_exclude
            key="b">
          <values>5</values>
        </matrix_exclude>
        <matrix_params
            key="version">
          <values>0.1</values>
          <values>0.2</values>
          <values>0.3</values>
        </matrix_params>
        <matrix_params
            key="platform">
          <values>macos</values>
          <values>windows</values>
        </matrix_params>
      </matrix>
    </jobworkflow>
  </workflow>
  <jobs name="Build"
      parallelism="2"
      reuseExecutor="my-executor">
    <environments
        key="MY-TEST-ENV"
        value="env_secret@78"/>
    <steps xsi:type="circleCI_metamodel:Run"
        name="Running tests"
        working_directory="~/project"
        shell="/bin/sh">
      <run_commands
          name="echo"/>
      <parameters
          parameter="hello world"/>
    </steps>
    <steps xsi:type="circleCI_metamodel:SaveCache"
        key="v1-{{ checksum &quot;yarn.lock&quot; }}">
      <paths>node_modules/workspace-a</paths>
      <paths>node_modules/workspace-c</paths>
    </steps>
    <steps xsi:type="circleCI_metamodel:Run">
      <run_commands
          name="mkdir -p /tmp/test-results"/>
    </steps>
  </jobs>
  <jobs name="Test"
      reuseExecutor="my-executor">
    <steps xsi:type="circleCI_metamodel:When_Unless"
        condition="if branch = master">
      <when_step
          xsi:type="circleCI_metamodel:Run">
        <run_commands
            name="echo &quot;preinstall&quot;"/>
      </when_step>
      <unless_step
          xsi:type="circleCI_metamodel:Run">
        <run_commands
            name="echo &quot;don't preinstall&quot;"/>
      </unless_step>
    </steps>
    <steps xsi:type="circleCI_metamodel:Checkout"/>
    <steps xsi:type="circleCI_metamodel:SetupRemoteDocker"
        version="20.10.14"/>
    <steps xsi:type="circleCI_metamodel:Run">
      <environments
          key="SSH_TARGET"
          value="localhost"/>
      <environments
          key="TEST_ENV"
          value="linux"/>
      <run_commands
          name="echo &quot;preinstall is &lt;&lt; parameters.preinstall-foo >>&quot;"/>
    </steps>
    <steps xsi:type="circleCI_metamodel:Run">
      <run_commands
          name="set -xu"/>
    </steps>
    <steps xsi:type="circleCI_metamodel:Run">
      <run_commands
          name="mkdir -p ${TEST_REPORTS}"/>
    </steps>
  </jobs>
  <jobs name="Executor Job"
      reuseExecutor="my-executor">
    <steps xsi:type="circleCI_metamodel:AddSSHKeys">
      <fingerprints>&quot;b7:35:a6:4e:9b:0d:6d:d4:78:1e:9a:97:2a:66:6b:be&quot;</fingerprints>
      <fingerprints>&quot;SHA256:NPj4IcXxqQEKGXOghi/QbG2sohoNfvZ30JwCcdSSNM0&quot;</fingerprints>
    </steps>
    <executors
        xsi:type="circleCI_metamodel:Docker"
        name="test-exec"
        resourceClass="medium"
        image="mongo:2.6.8">
      <docker_auth
          username="mydockerhub-user"
          password="$DOCKERHUB_PASSWORD"/>
      <command>[--smallfiles]</command>
    </executors>
  </jobs>
  <executors
      xsi:type="circleCI_metamodel:MacOs"
      name="exec1"
      resourceClass="macos.x86.medium.gen2*"
      xcode="my-xcode"/>
  <executors
      xsi:type="circleCI_metamodel:Machine"
      name="linuxNameExecutor"
      resourceClass="xlarge"
      shell="'powershell.exe -ExecutionPolicy Bypass'"
      image="LinuxImage"
      docker_layer_caching="true"/>
  <executors
      xsi:type="circleCI_metamodel:Docker"
      name="my-executor"
      resourceClass="small"
      image="docker_imagee">
    <environments
        key="ENV"
        value="VALUE1"/>
    <docker_auth
        username="mydockerhub-user"
        password="$DOCKERHUB_PASSWORD"/>
    <docker_aws_auth
        aws_access_key_id="oidc_role_arn"
        aws_secret_access_key="&lt;your-iam-role-arn>"/>
    <command>com1</command>
    <command>com2</command>
  </executors>
</circleCI_metamodel:Pipeline>
